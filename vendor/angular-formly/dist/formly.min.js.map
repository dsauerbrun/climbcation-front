{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///formly.min.js","webpack:///webpack/bootstrap f6efc4a054f70aab07a6","webpack:///./index.js","webpack:///./angular-fix/index.js","webpack:///./other/utils.js","webpack:///./directives/formly-custom-validation.js","webpack:///./directives/formly-field.js","webpack:///./directives/formly-focus.js","webpack:///./directives/formly-form.js","webpack:///./index.common.js","webpack:///./providers/formlyApiCheck.js","webpack:///./providers/formlyConfig.js","webpack:///./providers/formlyUsability.js","webpack:///./providers/formlyValidationMessages.js","webpack:///./run/formlyCustomTags.js","webpack:///./run/formlyNgModelAttrsManipulator.js","webpack:///./services/formlyUtil.js","webpack:///./services/formlyWarn.js","webpack:///external \"angular\"","webpack:///external {\"root\":\"apiCheck\",\"amd\":\"api-check\",\"commonjs2\":\"api-check\",\"commonjs\":\"api-check\"}"],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE_17__","__WEBPACK_EXTERNAL_MODULE_18__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequire","obj","__esModule","index","angular","version","window","formlyEval","scope","expression","$modelValue","$viewValue","extraLocals","isFunction","$eval","extend","getFieldId","formId","options","type","template","templateUrl","key","join","reverseDeepMerge","dest","forEach","arguments","src","val","prop","isDefined","objAndSameType","copy","obj1","obj2","isObject","Object","getPrototypeOf","findByNodeName","el","nodeName","element","toUpperCase","children","i","length","node","arrayify","isArray","extendFunction","_len","fns","Array","_key","args","fn","apply","formlyCustomValidation","formlyUtil","$q","isPromiseLike","then","checkValidators","validators","allowedProperties","validatorsWithExtraProps","validator","name","isString","extraProps","v","indexOf","push","keys","Error","JSON","stringify","restrict","link","attrs","ctrl","opts","validation","messages","message","useNewValidatorsApi","hasOwnProperty","setupWithValidators","validatorCollection","isPossiblyAsync","modelValue","viewValue","value","when","reject","setupWithParsers","inFlightValidator","undefined","$parsers","unshift","isValid","$pending","$setValidity","$inject","formlyField","$http","$compile","$templateCache","$interpolate","formlyConfig","formlyValidationMessages","formlyApiCheck","formlyUsability","formlyWarn","FormlyFieldController","$scope","$timeout","$parse","$controller","runExpressions","field","currentValue","valueGetterSetter","expressionProperties","setter","assign","promise","newVal","model","simplifyLife","data","templateOptions","to","formOptions","setFieldId","extras","formName","form","$name","setDefaultValue","defaultValue","setInitialValue","initialValue","mergeFieldOptionsWithTypeDefaults","mergeOptions","defaultOptions","properOrder","optionsTypes","reverse","typeName","getType","extraOptions","extendOptionsWithDefaults","resetModel","updateInitialValue","addModelWatcher","$watch","formControl","resetFormControl","isMultiNgModel","$setViewValue","$render","$setUntouched","$setPristine","$root","$$phase","$digest","addValidationMessages","invokeControllers","controller","setupFieldGroup","formState","fieldGroup","fieldType","getFieldType","checkApi","fieldLink","setFieldGroupTemplate","checkFieldGroupApi","addClass","extraAttributes","elementAttributes","map","setElementTemplate","className","addAttributes","attr","addClasses","templateString","html","asHtml","contents","watchFormControl","watchFieldNameOrExistence","nameExpressionRegex","nameExpression","exec","watchFieldExistence","fieldCount","fc","stopWatchingShowError","addShowMessagesWatcher","customExpression","errorExistsAndShouldBeVisibleExpression","$invalid","show","noTouchedButDirty","isUndefined","$touched","$dirty","errorExistsAndShouldBeVisible","showError","noop","noFormControl","templateEl","ngModelNodes","querySelectorAll","ngModelNode","getAttribute","callLinkFunctions","thusly","runManipulators","manipulators","templateToManipulate","chain","manipulator","newTemplate","fieldManipulators","getManipulators","getFieldTemplate","preWrapper","transcludeInWrappers","postWrapper","error","wrapper","append","addManipulators","_ref","_ref$preWrapper","pre","_ref$postWrapper","post","concat","templateManipulators","fromOptionsOrType","getFieldError","getTemplate","isUrl","templatePromise","_ret","httpOptions","cache","url","get","response","getWrapperOption","aWrapper","checkWrapper","validateOptions","runApiCheck","promises","w","all","wrappersTemplates","wrapperTemplate","checkWrapperTemplate","totalWrapper","shift","doTransclusion","superWrapper","transcludeEl","find","replaceWith","getWrapper","getWrapperByType","typeWrappers","formWrappers","defaultWrapper","formlyFieldOptions","prefix","apiCheck","apiCheckInstance","apiCheckFunction","apiCheckOptions","instance","shape","config","output","docsBaseUrl","transclude","fields","formlyFocus","$document","previousEl","doc","$observe","activeElement","focus","focusWait","blur","formlyForm","formlyFormGetTemplate","getRootEl","rootEl","getFieldRootEl","fieldRootEl","getHideDirective","hideDirective","defaultHideDirective","getTrackBy","trackBy","getFormName","bindName","minor","getFormlyError","startSymbol","endSymbol","copyAttributes","attributes","excluded","arrayAttrs","nodeValue","toKebabCase","currentFormId","parentFormAttributes","parent","hasClass","FormlyFormController","onModelOrFormStateChange","hideExpression","hide","evalCloseToFormlyExpression","setupOptions","formOptionsApi","optional","isFieldGroup","initModel","attachKey","setupWatchers","watcher","watchers","listener","watchExpression","getWatchExpression","watchListener","getWatchListener","stopWatching","watchDeep","originalExpression","modifyArgs","_slice","_toConsumableArray","displayName","originalListener","originalArgs","getFormlyFieldLikeLocals","formlyFormLink","setFormController","theFormlyForm","getter","parentForm","$parent","$removeControl","removeData","disableWarnings","console","warn","getErrorMessage","fixChromeAutocomplete","global","removeChromeAutoComplete","offInstance","onInstance","input","document","createElement","setAttribute","appendChild","string","replace","$1","toLowerCase","arr","arr2","from","prototype","slice","formlyErrorAndWarningsUrlPrefix","formlyNgModelAttrsManipulator","formlyCustomTags","ngModuleName","ngModule","constant","provider","directive","run","shapeRequiredIfNot","otherProps","propChecker","shapeRequiredIfNotDefinition","propName","location","propExists","otherPropsExist","some","otherProp","utils","getError","checkerHelpers","setupChecker","nullable","checker","oneOfType","oneOf","apiCheckFactory","formlyExpression","func","specifyWrapperType","typeOrArrayOf","apiCheckProperty","objectOf","apiCheckInstanceProperty","onlyIf","withProperties","throw","apiCheckFunctionProperty","formlyWrapperType","ifNot","types","overwriteOk","bool","object","strict","modelChecker","arrayOf","fieldOptionsApiShape","$$hashKey","any","number","modelOptions","updateOn","debounce","allowInvalid","getterSetter","timezone","ngModelAttrs","attribute","bound","array","typeOptionsDefaultOptions","formlyTypeOptions","extends","formlyUsabilityProvider","setType","checkType","extendTypeOptions","typeMap","checkOverwrite","extendsType","extendTypeControllerFunction","extendTypeLinkFunction","extendTypeValidateOptionsFunction","extendTypeDefaultOptions","extendTemplate","extendsCtrl","optionsCtrl","extendsFn","optionsFn","originalDefaultOptions","mergedOptions","extendsDO","optionsDO","optionsDOIsFn","extendsDOIsFn","extendsDefaultOptions","mergedDefaultOptions","extenderOptionsDefaultOptions","newDefaultOptions","throwError","errorContext","setWrapper","_x","_x2","_again","wrapperOptions","getOptionsTypes","getOptionsName","checkWrapperAPI","templateWrappersMap","defaultWrapperName","checkWrapperTypes","shouldThrow","every","property","newValue","objectName","wrappers","removeWrapperByName","removeWrappersForType","_this","_this2","disableNgModelAttrsManipulator","ngModelAttrsManipulatorPreferUnbound","$get","errorInfoSlug","toJson","urlSuffix","additionalInfo","formlyTransclude","addTemplateOptionValueMessage","suffix","alternate","validationMessages","templateOptionValue","addStringMessage","addCustomTags","div","innerHTML","isIeLessThan9","getElementsByTagName","customElements","addFormlyNgModelAttrsManipulator","ngModelAttrsManipulator","addValidation","addIfNotPresent","modelNodes","addModelOptions","addTemplateOptionsAttrs","ep","ngModelAttributes","getBuiltInAttributes","attrVal","attrName","ref","toVal","epVal","getEpValue","inTo","inEp","skipNgModelAttrsManipulator","boundOnly","bothBooleanAndBound","bothAttributeAndBound","expressionOnly","attributeOnly","item","boolean","substr","nodes","$log","warnInfoSlug"],"mappings":"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","file":"formly.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"), require(\"api-check\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\", \"api-check\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"), require(\"api-check\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"], root[\"apiCheck\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_18__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"angular\"), require(\"api-check\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"angular\", \"api-check\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ngFormly\"] = factory(require(\"angular\"), require(\"api-check\"));\n\telse\n\t\troot[\"ngFormly\"] = factory(root[\"angular\"], root[\"apiCheck\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_17__, __WEBPACK_EXTERNAL_MODULE_18__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar index = _interopRequire(__webpack_require__(8));\n\t\n\tmodule.exports = index;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// some versions of angular don't export the angular module properly,\n\t// so we get it from window in this case.\n\t\"use strict\";\n\t\n\tvar angular = __webpack_require__(17);\n\t\n\tif (!angular.version) {\n\t  angular = window.angular;\n\t}\n\tmodule.exports = angular;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = \"https://github.com/formly-js/angular-formly/blob/\" + (\"6.12.0\") + \"/other/ERRORS_AND_WARNINGS.md#\";\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar angular = _interopRequire(__webpack_require__(1));\n\t\n\tmodule.exports = { formlyEval: formlyEval, getFieldId: getFieldId, reverseDeepMerge: reverseDeepMerge, findByNodeName: findByNodeName, arrayify: arrayify, extendFunction: extendFunction };\n\t\n\tfunction formlyEval(scope, expression, $modelValue, $viewValue, extraLocals) {\n\t  if (angular.isFunction(expression)) {\n\t    return expression($viewValue, $modelValue, scope, extraLocals);\n\t  } else {\n\t    return scope.$eval(expression, angular.extend({ $viewValue: $viewValue, $modelValue: $modelValue }, extraLocals));\n\t  }\n\t}\n\t\n\tfunction getFieldId(formId, options, index) {\n\t  if (options.id) {\n\t    return options.id;\n\t  }\n\t  var type = options.type;\n\t  if (!type && options.template) {\n\t    type = \"template\";\n\t  } else if (!type && options.templateUrl) {\n\t    type = \"templateUrl\";\n\t  }\n\t\n\t  return [formId, type, options.key, index].join(\"_\");\n\t}\n\t\n\tfunction reverseDeepMerge(dest) {\n\t  angular.forEach(arguments, function (src, index) {\n\t    if (!index) {\n\t      return;\n\t    }\n\t    angular.forEach(src, function (val, prop) {\n\t      if (!angular.isDefined(dest[prop])) {\n\t        dest[prop] = angular.copy(val);\n\t      } else if (objAndSameType(dest[prop], val)) {\n\t        reverseDeepMerge(dest[prop], val);\n\t      }\n\t    });\n\t  });\n\t}\n\t\n\tfunction objAndSameType(obj1, obj2) {\n\t  return angular.isObject(obj1) && angular.isObject(obj2) && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n\t}\n\t\n\t// recurse down a node tree to find a node with matching nodeName, for custom tags jQuery.find doesn't work in IE8\n\tfunction findByNodeName(el, nodeName) {\n\t  if (!el.prop) {\n\t    // not a jQuery or jqLite object -> wrap it\n\t    el = angular.element(el);\n\t  }\n\t\n\t  if (el.prop(\"nodeName\") === nodeName.toUpperCase()) {\n\t    return el;\n\t  }\n\t\n\t  var c = el.children();\n\t  for (var i = 0; c && i < c.length; i++) {\n\t    var node = findByNodeName(c[i], nodeName);\n\t    if (node) {\n\t      return node;\n\t    }\n\t  }\n\t}\n\t\n\tfunction arrayify(obj) {\n\t  if (obj && !angular.isArray(obj)) {\n\t    obj = [obj];\n\t  } else if (!obj) {\n\t    obj = [];\n\t  }\n\t  return obj;\n\t}\n\t\n\tfunction extendFunction() {\n\t  for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {\n\t    fns[_key] = arguments[_key];\n\t  }\n\t\n\t  return function extendedFunction() {\n\t    var args = arguments;\n\t    fns.forEach(function (fn) {\n\t      return fn.apply(null, args);\n\t    });\n\t  };\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar angular = _interopRequire(__webpack_require__(1));\n\t\n\tmodule.exports = formlyCustomValidation;\n\t\n\t// @ngInject\n\tfunction formlyCustomValidation(formlyUtil, $q) {\n\t  return {\n\t    restrict: \"A\",\n\t    require: \"ngModel\",\n\t    link: function formlyCustomValidationLink(scope, el, attrs, ctrl) {\n\t      var opts = scope.options;\n\t      if (opts.validators) {\n\t        checkValidators(opts.validators);\n\t      }\n\t      opts.validation.messages = opts.validation.messages || {};\n\t      angular.forEach(opts.validation.messages, function (message, key) {\n\t        opts.validation.messages[key] = function () {\n\t          return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t        };\n\t      });\n\t\n\t      var useNewValidatorsApi = ctrl.hasOwnProperty(\"$validators\") && !attrs.hasOwnProperty(\"useParsers\");\n\t      angular.forEach(opts.validators, function addValidatorToPipeline(validator, name) {\n\t        var message = validator.message;\n\t        if (message) {\n\t          opts.validation.messages[name] = function () {\n\t            return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n\t          };\n\t        }\n\t        validator = angular.isObject(validator) ? validator.expression : validator;\n\t        var isPossiblyAsync = !angular.isString(validator);\n\t        if (useNewValidatorsApi) {\n\t          setupWithValidators();\n\t        } else {\n\t          setupWithParsers();\n\t        }\n\t\n\t        function setupWithValidators() {\n\t          var validatorCollection = isPossiblyAsync ? \"$asyncValidators\" : \"$validators\";\n\t          ctrl[validatorCollection][name] = function evalValidity(modelValue, viewValue) {\n\t            var value = formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n\t            if (isPossiblyAsync) {\n\t              return isPromiseLike(value) ? value : value ? $q.when(value) : $q.reject(value);\n\t            } else {\n\t              return value;\n\t            }\n\t          };\n\t        }\n\t\n\t        function setupWithParsers() {\n\t          var inFlightValidator = undefined;\n\t          ctrl.$parsers.unshift(function evalValidityOfParser(viewValue) {\n\t            var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n\t            if (isPromiseLike(isValid)) {\n\t              ctrl.$pending = ctrl.$pending || {};\n\t              ctrl.$pending[name] = true;\n\t              inFlightValidator = isValid;\n\t              isValid.then(function () {\n\t                if (inFlightValidator === isValid) {\n\t                  ctrl.$setValidity(name, true);\n\t                }\n\t              })[\"catch\"](function () {\n\t                if (inFlightValidator === isValid) {\n\t                  ctrl.$setValidity(name, false);\n\t                }\n\t              })[\"finally\"](function () {\n\t                if (Object.keys(ctrl.$pending).length === 1) {\n\t                  delete ctrl.$pending;\n\t                } else {\n\t                  delete ctrl.$pending[name];\n\t                }\n\t              });\n\t            } else {\n\t              ctrl.$setValidity(name, isValid);\n\t            }\n\t            return viewValue;\n\t          });\n\t        }\n\t      });\n\t    }\n\t  };\n\t\n\t  function isPromiseLike(obj) {\n\t    return obj && angular.isFunction(obj.then);\n\t  }\n\t\n\t  function checkValidators(validators) {\n\t    var allowedProperties = [\"expression\", \"message\"];\n\t    var validatorsWithExtraProps = {};\n\t    angular.forEach(validators, function (validator, name) {\n\t      if (angular.isString(validator)) {\n\t        return;\n\t      }\n\t      var extraProps = [];\n\t      angular.forEach(validator, function (v, key) {\n\t        if (allowedProperties.indexOf(key) === -1) {\n\t          extraProps.push(key);\n\t        }\n\t      });\n\t      if (extraProps.length) {\n\t        validatorsWithExtraProps[name] = extraProps;\n\t      }\n\t    });\n\t    if (Object.keys(validatorsWithExtraProps).length) {\n\t      throw new Error([\"Validators are only allowed to be functions or objects that have \" + allowedProperties.join(\", \") + \".\", \"You provided some extra properties: \" + JSON.stringify(validatorsWithExtraProps)].join(\" \"));\n\t    }\n\t  }\n\t}\n\tformlyCustomValidation.$inject = [\"formlyUtil\", \"$q\"];\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar angular = _interopRequire(__webpack_require__(1));\n\t\n\tmodule.exports = formlyField;\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name formlyField\n\t * @restrict AE\n\t */\n\t// @ngInject\n\tfunction formlyField($http, $q, $compile, $templateCache, $interpolate, formlyConfig, formlyValidationMessages, formlyApiCheck, formlyUtil, formlyUsability, formlyWarn) {\n\t  var arrayify = formlyUtil.arrayify;\n\t\n\t  FormlyFieldController.$inject = [\"$scope\", \"$timeout\", \"$parse\", \"$controller\"];\n\t  return {\n\t    restrict: \"AE\",\n\t    transclude: true,\n\t    scope: {\n\t      options: \"=\",\n\t      model: \"=\",\n\t      formId: \"@\", // TODO remove formId in a breaking release\n\t      index: \"=?\",\n\t      fields: \"=?\",\n\t      formState: \"=?\",\n\t      formOptions: \"=?\",\n\t      form: \"=?\" // TODO require form in a breaking release\n\t    },\n\t    controller: FormlyFieldController,\n\t    link: fieldLink\n\t  };\n\t\n\t  // @ngInject\n\t  function FormlyFieldController($scope, $timeout, $parse, $controller) {\n\t    /* eslint max-statements:[2, 31] */\n\t    if ($scope.options.fieldGroup) {\n\t      setupFieldGroup();\n\t      return;\n\t    }\n\t\n\t    var fieldType = getFieldType($scope.options);\n\t    simplifyLife($scope.options);\n\t    mergeFieldOptionsWithTypeDefaults($scope.options, fieldType);\n\t    extendOptionsWithDefaults($scope.options, $scope.index);\n\t    checkApi($scope.options);\n\t    // set field id to link labels and fields\n\t\n\t    // initalization\n\t    setFieldId();\n\t    setDefaultValue();\n\t    setInitialValue();\n\t    runExpressions();\n\t    addModelWatcher($scope, $scope.options);\n\t    addValidationMessages($scope.options);\n\t    invokeControllers($scope, $scope.options, fieldType);\n\t\n\t    // function definitions\n\t    function runExpressions() {\n\t      // must run on next tick to make sure that the current value is correct.\n\t      $timeout(function runExpressionsOnNextTick() {\n\t        var field = $scope.options;\n\t        var currentValue = valueGetterSetter();\n\t        angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n\t          var setter = $parse(prop).assign;\n\t          var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue, currentValue));\n\t          promise.then(function setFieldValue(value) {\n\t            setter(field, value);\n\t          });\n\t        });\n\t      });\n\t    }\n\t\n\t    function valueGetterSetter(newVal) {\n\t      if (!$scope.model || !$scope.options.key) {\n\t        return undefined;\n\t      }\n\t      if (angular.isDefined(newVal)) {\n\t        $scope.model[$scope.options.key] = newVal;\n\t      }\n\t      return $scope.model[$scope.options.key];\n\t    }\n\t\n\t    function simplifyLife(options) {\n\t      // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n\t      formlyUtil.reverseDeepMerge(options, {\n\t        data: {},\n\t        templateOptions: {},\n\t        validation: {}\n\t      });\n\t      // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n\t      $scope.to = $scope.options.templateOptions;\n\t      $scope.formOptions = $scope.formOptions || {};\n\t    }\n\t\n\t    function setFieldId() {\n\t      if (angular.isFunction(formlyConfig.extras.getFieldId)) {\n\t        $scope.id = formlyConfig.extras.getFieldId($scope.options, $scope.model, $scope);\n\t      } else {\n\t        var formName = $scope.form && $scope.form.$name || $scope.formId;\n\t        $scope.id = formlyUtil.getFieldId(formName, $scope.options, $scope.index);\n\t      }\n\t      $scope.options.id = $scope.id;\n\t    }\n\t\n\t    function setDefaultValue() {\n\t      if (angular.isDefined($scope.options.defaultValue) && !angular.isDefined($scope.model[$scope.options.key])) {\n\t        $scope.model[$scope.options.key] = $scope.options.defaultValue;\n\t      }\n\t    }\n\t\n\t    function setInitialValue() {\n\t      $scope.options.initialValue = $scope.model && $scope.model[$scope.options.key];\n\t    }\n\t\n\t    function mergeFieldOptionsWithTypeDefaults(options, type) {\n\t      if (type) {\n\t        mergeOptions(options, type.defaultOptions);\n\t      }\n\t      var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n\t      angular.forEach(properOrder, function (typeName) {\n\t        mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n\t      });\n\t    }\n\t\n\t    function mergeOptions(options, extraOptions) {\n\t      if (extraOptions) {\n\t        if (angular.isFunction(extraOptions)) {\n\t          extraOptions = extraOptions(options);\n\t        }\n\t        formlyUtil.reverseDeepMerge(options, extraOptions);\n\t      }\n\t    }\n\t\n\t    function extendOptionsWithDefaults(options, index) {\n\t      var key = options.key || index || 0;\n\t      angular.extend(options, {\n\t        // attach the key in case the formly-field directive is used directly\n\t        key: key,\n\t        value: valueGetterSetter,\n\t        runExpressions: runExpressions,\n\t        resetModel: resetModel,\n\t        updateInitialValue: updateInitialValue\n\t      });\n\t    }\n\t\n\t    // initialization functions\n\t    function addModelWatcher(scope, options) {\n\t      if (options.model) {\n\t        scope.$watch(\"options.model\", runExpressions, true);\n\t      }\n\t    }\n\t\n\t    function resetModel() {\n\t      $scope.model[$scope.options.key] = $scope.options.initialValue;\n\t      if ($scope.options.formControl) {\n\t        if (angular.isArray($scope.options.formControl)) {\n\t          angular.forEach($scope.options.formControl, function (formControl) {\n\t            resetFormControl(formControl, true);\n\t          });\n\t        } else {\n\t          resetFormControl($scope.options.formControl);\n\t        }\n\t      }\n\t    }\n\t\n\t    function resetFormControl(formControl, isMultiNgModel) {\n\t      if (!isMultiNgModel) {\n\t        formControl.$setViewValue($scope.model[$scope.options.key]);\n\t      }\n\t\n\t      formControl.$render();\n\t      formControl.$setUntouched();\n\t      formControl.$setPristine();\n\t\n\t      // To prevent breaking change requiring a digest to reset $viewModel\n\t      if (!$scope.$root.$$phase) {\n\t        $scope.$digest();\n\t      }\n\t    }\n\t\n\t    function updateInitialValue() {\n\t      $scope.options.initialValue = $scope.model[$scope.options.key];\n\t    }\n\t\n\t    function addValidationMessages(options) {\n\t      options.validation.messages = options.validation.messages || {};\n\t      angular.forEach(formlyValidationMessages.messages, function createFunctionForMessage(expression, name) {\n\t        if (!options.validation.messages[name]) {\n\t          options.validation.messages[name] = function evaluateMessage(viewValue, modelValue, scope) {\n\t            return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n\t          };\n\t        }\n\t      });\n\t    }\n\t\n\t    function invokeControllers(scope) {\n\t      var options = arguments[1] === undefined ? {} : arguments[1];\n\t      var type = arguments[2] === undefined ? {} : arguments[2];\n\t\n\t      angular.forEach([type.controller, options.controller], function (controller) {\n\t        if (controller) {\n\t          $controller(controller, { $scope: scope });\n\t        }\n\t      });\n\t    }\n\t\n\t    function setupFieldGroup() {\n\t      $scope.options.options = $scope.options.options || {};\n\t      $scope.options.options.formState = $scope.formState;\n\t    }\n\t  }\n\t\n\t  // link function\n\t  function fieldLink(scope, el) {\n\t    if (scope.options.fieldGroup) {\n\t      setFieldGroupTemplate();\n\t      return;\n\t    }\n\t\n\t    addAttributes();\n\t    addClasses();\n\t\n\t    var type = getFieldType(scope.options);\n\t    var args = arguments;\n\t    var thusly = this;\n\t    var fieldCount = 0;\n\t    var fieldManipulators = getManipulators(scope.options, scope.formOptions);\n\t    getFieldTemplate(scope.options).then(runManipulators(fieldManipulators.preWrapper)).then(transcludeInWrappers(scope.options, scope.formOptions)).then(runManipulators(fieldManipulators.postWrapper)).then(setElementTemplate).then(watchFormControl).then(callLinkFunctions)[\"catch\"](function (error) {\n\t      formlyWarn(\"there-was-a-problem-setting-the-template-for-this-field\", \"There was a problem setting the template for this field \", scope.options, error);\n\t    });\n\t\n\t    function setFieldGroupTemplate() {\n\t      checkFieldGroupApi(scope.options);\n\t      el.addClass(\"formly-field-group\");\n\t      var extraAttributes = \"\";\n\t      if (scope.options.elementAttributes) {\n\t        extraAttributes = Object.keys(scope.options.elementAttributes).map(function (key) {\n\t          return \"\" + key + \"=\\\"\" + scope.options.elementAttributes[key] + \"\\\"\";\n\t        }).join(\" \");\n\t      }\n\t      var modelValue = \"model\";\n\t      if (scope.options.key) {\n\t        modelValue = \"model['\" + scope.options.key + \"']\";\n\t      }\n\t      setElementTemplate(\"\\n          <formly-form model=\\\"\" + modelValue + \"\\\"\\n                       fields=\\\"options.fieldGroup\\\"\\n                       options=\\\"options.options\\\"\\n                       form=\\\"options.form\\\"\\n                       class=\\\"\" + scope.options.className + \"\\\"\\n                       \" + extraAttributes + \"\\n                       is-field-group>\\n          </formly-form>\\n        \");\n\t    }\n\t\n\t    function addAttributes() {\n\t      if (scope.options.elementAttributes) {\n\t        el.attr(scope.options.elementAttributes);\n\t      }\n\t    }\n\t\n\t    function addClasses() {\n\t      if (scope.options.className) {\n\t        el.addClass(scope.options.className);\n\t      }\n\t      if (scope.options.type) {\n\t        el.addClass(\"formly-field-\" + scope.options.type);\n\t      }\n\t    }\n\t\n\t    function setElementTemplate(templateString) {\n\t      el.html(asHtml(templateString));\n\t      $compile(el.contents())(scope);\n\t      return templateString;\n\t    }\n\t\n\t    function watchFormControl(templateString) {\n\t      var stopWatchingShowError = angular.noop;\n\t      if (scope.options.noFormControl) {\n\t        return;\n\t      }\n\t      var templateEl = angular.element(\"<div>\" + templateString + \"</div>\");\n\t      var ngModelNodes = templateEl[0].querySelectorAll(\"[ng-model],[data-ng-model]\");\n\t\n\t      if (ngModelNodes) {\n\t        angular.forEach(ngModelNodes, function (ngModelNode) {\n\t          fieldCount++;\n\t          watchFieldNameOrExistence(ngModelNode.getAttribute(\"name\"));\n\t        });\n\t      }\n\t\n\t      function watchFieldNameOrExistence(name) {\n\t        var nameExpressionRegex = /\\{\\{(.*?)}}/;\n\t        var nameExpression = nameExpressionRegex.exec(name);\n\t        if (nameExpression) {\n\t          name = $interpolate(name)(scope);\n\t        }\n\t        watchFieldExistence(name);\n\t      }\n\t\n\t      function watchFieldExistence(name) {\n\t        scope.$watch(\"form[\\\"\" + name + \"\\\"]\", function formControlChange(formControl) {\n\t          if (formControl) {\n\t            if (fieldCount > 1) {\n\t              if (!scope.options.formControl) {\n\t                scope.options.formControl = [];\n\t              }\n\t              scope.options.formControl.push(formControl);\n\t            } else {\n\t              scope.options.formControl = formControl;\n\t            }\n\t            scope.fc = scope.options.formControl; // shortcut for template authors\n\t            stopWatchingShowError();\n\t            addShowMessagesWatcher();\n\t          }\n\t        });\n\t      }\n\t\n\t      function addShowMessagesWatcher() {\n\t        stopWatchingShowError = scope.$watch(function watchShowValidationChange() {\n\t          var customExpression = formlyConfig.extras.errorExistsAndShouldBeVisibleExpression;\n\t          var options = scope.options;\n\t          var fc = scope.fc;\n\t\n\t          if (!fc.$invalid) {\n\t            return false;\n\t          } else if (typeof options.validation.show === \"boolean\") {\n\t            return options.validation.show;\n\t          } else if (customExpression) {\n\t            return formlyUtil.formlyEval(scope, customExpression, fc.$modelValue, fc.$viewValue);\n\t          } else {\n\t            var noTouchedButDirty = angular.isUndefined(fc.$touched) && fc.$dirty;\n\t            return scope.fc.$touched || noTouchedButDirty;\n\t          }\n\t        }, function onShowValidationChange(show) {\n\t          scope.options.validation.errorExistsAndShouldBeVisible = show;\n\t          scope.showError = show; // shortcut for template authors\n\t        });\n\t      }\n\t    }\n\t\n\t    function callLinkFunctions() {\n\t      if (type && type.link) {\n\t        type.link.apply(thusly, args);\n\t      }\n\t      if (scope.options.link) {\n\t        scope.options.link.apply(thusly, args);\n\t      }\n\t    }\n\t\n\t    function runManipulators(manipulators) {\n\t      return function runManipulatorsOnTemplate(templateToManipulate) {\n\t        var chain = $q.when(templateToManipulate);\n\t        angular.forEach(manipulators, function (manipulator) {\n\t          chain = chain.then(function (template) {\n\t            return $q.when(manipulator(template, scope.options, scope)).then(function (newTemplate) {\n\t              return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n\t            });\n\t          });\n\t        });\n\t        return chain;\n\t      };\n\t    }\n\t  }\n\t\n\t  // sort-of stateless util functions\n\t  function asHtml(el) {\n\t    var wrapper = angular.element(\"<a></a>\");\n\t    return wrapper.append(el).html();\n\t  }\n\t\n\t  function getFieldType(options) {\n\t    return options.type && formlyConfig.getType(options.type);\n\t  }\n\t\n\t  function getManipulators(options, formOptions) {\n\t    var preWrapper = [];\n\t    var postWrapper = [];\n\t    addManipulators(options.templateManipulators);\n\t    addManipulators(formOptions.templateManipulators);\n\t    addManipulators(formlyConfig.templateManipulators);\n\t    return { preWrapper: preWrapper, postWrapper: postWrapper };\n\t\n\t    function addManipulators(manipulators) {\n\t      /* eslint-disable */ // it doesn't understand this :-(\n\t\n\t      var _ref = manipulators || {};\n\t\n\t      var _ref$preWrapper = _ref.preWrapper;\n\t      var pre = _ref$preWrapper === undefined ? [] : _ref$preWrapper;\n\t      var _ref$postWrapper = _ref.postWrapper;\n\t      var post = _ref$postWrapper === undefined ? [] : _ref$postWrapper;\n\t\n\t      preWrapper = preWrapper.concat(pre);\n\t      postWrapper = postWrapper.concat(post);\n\t      /* eslint-enable */\n\t    }\n\t  }\n\t\n\t  function getFieldTemplate(options) {\n\t    function fromOptionsOrType(key, fieldType) {\n\t      if (angular.isDefined(options[key])) {\n\t        return options[key];\n\t      } else if (fieldType && angular.isDefined(fieldType[key])) {\n\t        return fieldType[key];\n\t      }\n\t    }\n\t\n\t    var type = formlyConfig.getType(options.type, true, options);\n\t    var template = fromOptionsOrType(\"template\", type);\n\t    var templateUrl = fromOptionsOrType(\"templateUrl\", type);\n\t    if (angular.isUndefined(template) && !templateUrl) {\n\t      throw formlyUsability.getFieldError(\"type-type-has-no-template\", \"Type '\" + options.type + \"' has not template. On element:\", options);\n\t    }\n\t\n\t    return getTemplate(templateUrl || template, angular.isUndefined(template), options);\n\t  }\n\t\n\t  function getTemplate(template, isUrl, options) {\n\t    var templatePromise = undefined;\n\t    if (angular.isFunction(template)) {\n\t      templatePromise = $q.when(template(options));\n\t    } else {\n\t      templatePromise = $q.when(template);\n\t    }\n\t\n\t    if (!isUrl) {\n\t      return templatePromise;\n\t    } else {\n\t      var _ret = (function () {\n\t        var httpOptions = { cache: $templateCache };\n\t        return {\n\t          v: templatePromise.then(function (url) {\n\t            return $http.get(url, httpOptions);\n\t          }).then(function (response) {\n\t            return response.data;\n\t          })[\"catch\"](function handleErrorGettingATemplate(error) {\n\t            formlyWarn(\"problem-loading-template-for-templateurl\", \"Problem loading template for \" + template, error);\n\t          })\n\t        };\n\t      })();\n\t\n\t      if (typeof _ret === \"object\") {\n\t        return _ret.v;\n\t      }\n\t    }\n\t  }\n\t\n\t  function transcludeInWrappers(options, formOptions) {\n\t    var wrapper = getWrapperOption(options, formOptions);\n\t\n\t    return function transcludeTemplate(template) {\n\t      if (!wrapper.length) {\n\t        return $q.when(template);\n\t      }\n\t\n\t      wrapper.forEach(function (aWrapper) {\n\t        formlyUsability.checkWrapper(aWrapper, options);\n\t        aWrapper.validateOptions && aWrapper.validateOptions(options);\n\t        runApiCheck(aWrapper, options);\n\t      });\n\t      var promises = wrapper.map(function (w) {\n\t        return getTemplate(w.template || w.templateUrl, !w.template);\n\t      });\n\t      return $q.all(promises).then(function (wrappersTemplates) {\n\t        wrappersTemplates.forEach(function (wrapperTemplate, index) {\n\t          formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n\t        });\n\t        wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n\t        var totalWrapper = wrappersTemplates.shift();\n\t        wrappersTemplates.forEach(function (wrapperTemplate) {\n\t          totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n\t        });\n\t        return doTransclusion(totalWrapper, template);\n\t      });\n\t    };\n\t  }\n\t\n\t  function doTransclusion(wrapper, template) {\n\t    var superWrapper = angular.element(\"<a></a>\"); // this allows people not have to have a single root in wrappers\n\t    superWrapper.append(wrapper);\n\t    var transcludeEl = superWrapper.find(\"formly-transclude\");\n\t    if (!transcludeEl.length) {\n\t      // try it using our custom find function\n\t      transcludeEl = formlyUtil.findByNodeName(superWrapper, \"formly-transclude\");\n\t    }\n\t    transcludeEl.replaceWith(template);\n\t    return superWrapper.html();\n\t  }\n\t\n\t  function getWrapperOption(options, formOptions) {\n\t    /* eslint complexity:[6, 2] */\n\t    var wrapper = options.wrapper;\n\t    // explicit null means no wrapper\n\t    if (wrapper === null) {\n\t      return [];\n\t    }\n\t\n\t    // nothing specified means use the default wrapper for the type\n\t    if (!wrapper) {\n\t      // get all wrappers that specify they apply to this type\n\t      wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n\t    } else {\n\t      wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n\t    }\n\t\n\t    // get all wrappers for that the type specified that it uses.\n\t    var type = formlyConfig.getType(options.type, true, options);\n\t    if (type && type.wrapper) {\n\t      var typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n\t      wrapper = wrapper.concat(typeWrappers);\n\t    }\n\t\n\t    // add form wrappers\n\t    if (formOptions.wrapper) {\n\t      var formWrappers = arrayify(formOptions.wrapper).map(formlyConfig.getWrapper);\n\t      wrapper = wrapper.concat(formWrappers);\n\t    }\n\t\n\t    // add the default wrapper last\n\t    var defaultWrapper = formlyConfig.getWrapper();\n\t    if (defaultWrapper) {\n\t      wrapper.push(defaultWrapper);\n\t    }\n\t    return wrapper;\n\t  }\n\t\n\t  function checkApi(options) {\n\t    formlyApiCheck[\"throw\"](formlyApiCheck.formlyFieldOptions, options, {\n\t      prefix: \"formly-field directive\",\n\t      url: \"formly-field-directive-validation-failed\"\n\t    });\n\t    // validate with the type\n\t    var type = options.type && formlyConfig.getType(options.type);\n\t    if (type) {\n\t      if (type.validateOptions) {\n\t        type.validateOptions(options);\n\t      }\n\t      runApiCheck(type, options);\n\t    }\n\t  }\n\t\n\t  function checkFieldGroupApi(options) {\n\t    formlyApiCheck[\"throw\"](formlyApiCheck.fieldGroup, options, {\n\t      prefix: \"formly-field directive\",\n\t      url: \"formly-field-directive-validation-failed\"\n\t    });\n\t  }\n\t\n\t  function runApiCheck(_ref, options) {\n\t    var apiCheck = _ref.apiCheck;\n\t    var apiCheckInstance = _ref.apiCheckInstance;\n\t    var apiCheckFunction = _ref.apiCheckFunction;\n\t    var apiCheckOptions = _ref.apiCheckOptions;\n\t\n\t    if (!apiCheck) {\n\t      return;\n\t    }\n\t    var instance = apiCheckInstance || formlyApiCheck;\n\t    var fn = apiCheckFunction || \"warn\";\n\t    var shape = instance.shape(apiCheck);\n\t    instance[fn](shape, options, apiCheckOptions || {\n\t      prefix: \"formly-field \" + name,\n\t      url: formlyApiCheck.config.output.docsBaseUrl + \"formly-field-type-apicheck-failed\"\n\t    });\n\t  }\n\t}\n\tformlyField.$inject = [\"$http\", \"$q\", \"$compile\", \"$templateCache\", \"$interpolate\", \"formlyConfig\", \"formlyValidationMessages\", \"formlyApiCheck\", \"formlyUtil\", \"formlyUsability\", \"formlyWarn\"];\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = formlyFocus;\n\t\n\t// @ngInject\n\tfunction formlyFocus($timeout, $document) {\n\t  return {\n\t    restrict: \"A\",\n\t    link: function formlyFocusLink(scope, element, attrs) {\n\t      var previousEl = null;\n\t      var el = element[0];\n\t      var doc = $document[0];\n\t      attrs.$observe(\"formlyFocus\", function respondToFocusExpressionChange(value) {\n\t        if (value === \"true\") {\n\t          $timeout(function setElementFocus() {\n\t            previousEl = doc.activeElement;\n\t            el.focus();\n\t          }, ~ ~attrs.focusWait);\n\t        } else if (value === \"false\") {\n\t          if (doc.activeElement === el) {\n\t            el.blur();\n\t            if (attrs.hasOwnProperty(\"refocus\") && previousEl) {\n\t              previousEl.focus();\n\t            }\n\t          }\n\t        }\n\t      });\n\t    }\n\t  };\n\t}\n\tformlyFocus.$inject = [\"$timeout\", \"$document\"];\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar _toConsumableArray = function (arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } };\n\t\n\tvar _slice = Array.prototype.slice;\n\t\n\tvar angular = _interopRequire(__webpack_require__(1));\n\t\n\tmodule.exports = formlyForm;\n\t\n\t/**\n\t * @ngdoc directive\n\t * @name formlyForm\n\t * @restrict E\n\t */\n\t// @ngInject\n\tfunction formlyForm(formlyUsability, $parse, formlyConfig, $interpolate) {\n\t  var currentFormId = 1;\n\t  FormlyFormController.$inject = [\"$scope\", \"formlyApiCheck\", \"formlyUtil\"];\n\t  return {\n\t    restrict: \"E\",\n\t    template: formlyFormGetTemplate,\n\t    replace: true,\n\t    transclude: true,\n\t    scope: {\n\t      fields: \"=\",\n\t      model: \"=\",\n\t      form: \"=?\",\n\t      options: \"=?\"\n\t    },\n\t    controller: FormlyFormController,\n\t    link: formlyFormLink\n\t  };\n\t\n\t  function formlyFormGetTemplate(el, attrs) {\n\t    var rootEl = getRootEl();\n\t    var fieldRootEl = getFieldRootEl();\n\t    var formId = \"formly_\" + currentFormId++;\n\t    var parentFormAttributes = \"\";\n\t    if (attrs.hasOwnProperty(\"isFieldGroup\") && el.parent().parent().hasClass(\"formly\")) {\n\t      parentFormAttributes = copyAttributes(el.parent().parent()[0].attributes);\n\t    }\n\t    return \"\\n        <\" + rootEl + \" class=\\\"formly\\\"\\n                 name=\\\"\" + getFormName() + \"\\\"\\n                 role=\\\"form\\\" \" + parentFormAttributes + \">\\n          <\" + fieldRootEl + \" formly-field\\n               ng-repeat=\\\"field in fields \" + getTrackBy() + \"\\\"\\n               \" + getHideDirective() + \"=\\\"!field.hide\\\"\\n               class=\\\"formly-field\\\"\\n               options=\\\"field\\\"\\n               model=\\\"field.model || model\\\"\\n               fields=\\\"fields\\\"\\n               form=\\\"theFormlyForm\\\"\\n               form-id=\\\"\" + getFormName() + \"\\\"\\n               form-state=\\\"options.formState\\\"\\n               form-options=\\\"options\\\"\\n               index=\\\"$index\\\">\\n          </\" + fieldRootEl + \">\\n          <div ng-transclude></div>\\n        </\" + rootEl + \">\\n      \";\n\t\n\t    function getRootEl() {\n\t      return attrs.rootEl || \"ng-form\";\n\t    }\n\t\n\t    function getFieldRootEl() {\n\t      return attrs.fieldRootEl || \"div\";\n\t    }\n\t\n\t    function getHideDirective() {\n\t      return attrs.hideDirective || formlyConfig.extras.defaultHideDirective || \"ng-if\";\n\t    }\n\t\n\t    function getTrackBy() {\n\t      if (!attrs.trackBy) {\n\t        return \"\";\n\t      } else {\n\t        return \"track by \" + attrs.trackBy;\n\t      }\n\t    }\n\t\n\t    function getFormName() {\n\t      var formName = formId;\n\t      var bindName = attrs.bindName;\n\t      if (bindName) {\n\t        if (angular.version.minor < 3) {\n\t          throw formlyUsability.getFormlyError(\"bind-name attribute on formly-form not allowed in < angular 1.3\");\n\t        }\n\t        // we can do a one-time binding here because we know we're in 1.3.x territory\n\t        formName = \"\" + $interpolate.startSymbol() + \"::'formly_' + \" + bindName + \"\" + $interpolate.endSymbol();\n\t      }\n\t      return formName;\n\t    }\n\t\n\t    function copyAttributes(attributes) {\n\t      var excluded = [\"model\", \"form\", \"fields\", \"options\", \"name\", \"role\", \"class\"];\n\t      var arrayAttrs = [];\n\t      angular.forEach(attributes, function (_ref) {\n\t        var nodeName = _ref.nodeName;\n\t        var nodeValue = _ref.nodeValue;\n\t\n\t        if (nodeName !== \"undefined\" && excluded.indexOf(nodeName) === -1) {\n\t          arrayAttrs.push(\"\" + toKebabCase(nodeName) + \"=\\\"\" + nodeValue + \"\\\"\");\n\t        }\n\t      });\n\t      return arrayAttrs.join(\" \");\n\t    }\n\t  }\n\t\n\t  // @ngInject\n\t  function FormlyFormController($scope, formlyApiCheck, formlyUtil) {\n\t    setupOptions();\n\t    $scope.model = $scope.model || {};\n\t    $scope.fields = $scope.fields || [];\n\t\n\t    angular.forEach($scope.fields, initModel); // initializes the model property if set to 'formState'\n\t    angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n\t    angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\t\n\t    // watch the model and evaluate watch expressions that depend on it.\n\t    $scope.$watch(\"model\", onModelOrFormStateChange, true);\n\t    if ($scope.options.formState) {\n\t      $scope.$watch(\"options.formState\", onModelOrFormStateChange, true);\n\t    }\n\t\n\t    function onModelOrFormStateChange() {\n\t      angular.forEach($scope.fields, function runFieldExpressionProperties(field, index) {\n\t        /*jshint -W030 */\n\t        var model = field.model || $scope.model;\n\t        field.runExpressions && field.runExpressions(model);\n\t        if (field.hideExpression) {\n\t          // can't use hide with expressionProperties reliably\n\t          var val = model[field.key];\n\t          field.hide = evalCloseToFormlyExpression(field.hideExpression, val, field, index);\n\t        }\n\t      });\n\t    }\n\t\n\t    function setupOptions() {\n\t      formlyApiCheck[\"throw\"]([formlyApiCheck.formOptionsApi.optional], [$scope.options], { prefix: \"formly-form options check\" });\n\t      $scope.options = $scope.options || {};\n\t      $scope.options.formState = $scope.options.formState || {};\n\t\n\t      angular.extend($scope.options, {\n\t        updateInitialValue: updateInitialValue,\n\t        resetModel: resetModel\n\t      });\n\t    }\n\t\n\t    function updateInitialValue() {\n\t      angular.forEach($scope.fields, function (field) {\n\t        if (isFieldGroup(field)) {\n\t          field.options.updateInitialValue();\n\t        } else {\n\t          field.updateInitialValue();\n\t        }\n\t      });\n\t    }\n\t\n\t    function resetModel() {\n\t      angular.forEach($scope.fields, function (field) {\n\t        if (isFieldGroup(field)) {\n\t          field.options.resetModel();\n\t        } else {\n\t          field.resetModel();\n\t        }\n\t      });\n\t    }\n\t\n\t    function initModel(field) {\n\t      if (angular.isString(field.model)) {\n\t        var expression = field.model;\n\t        var index = $scope.fields.indexOf(field);\n\t        field.model = evalCloseToFormlyExpression(expression, undefined, field, index);\n\t        if (!field.model) {\n\t          throw formlyUsability.getFieldError(\"field-model-must-be-initialized\", \"Field model must be initialized. When specifying a model as a string for a field, the result of the\" + \" expression must have been initialized ahead of time.\", field);\n\t        }\n\t      }\n\t    }\n\t\n\t    function attachKey(field, index) {\n\t      if (!isFieldGroup(field)) {\n\t        field.key = field.key || index || 0;\n\t      }\n\t    }\n\t\n\t    function setupWatchers(field, index) {\n\t      if (isFieldGroup(field) || !angular.isDefined(field.watcher)) {\n\t        return;\n\t      }\n\t      var watchers = field.watcher;\n\t      if (!angular.isArray(watchers)) {\n\t        watchers = [watchers];\n\t      }\n\t      angular.forEach(watchers, function setupWatcher(watcher) {\n\t        if (!angular.isDefined(watcher.listener)) {\n\t          throw formlyUsability.getFieldError(\"all-field-watchers-must-have-a-listener\", \"All field watchers must have a listener\", field);\n\t        }\n\t        var watchExpression = getWatchExpression(watcher, field, index);\n\t        var watchListener = getWatchListener(watcher, field, index);\n\t\n\t        var type = watcher.type || \"$watch\";\n\t        watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n\t      });\n\t    }\n\t\n\t    function getWatchExpression(watcher, field, index) {\n\t      var watchExpression = watcher.expression || \"model['\" + field.key + \"']\";\n\t      if (angular.isFunction(watchExpression)) {\n\t        // wrap the field's watch expression so we can call it with the field as the first arg\n\t        // and the stop function as the last arg as a helper\n\t        var originalExpression = watchExpression;\n\t        watchExpression = function formlyWatchExpression() {\n\t          var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t          return originalExpression.apply(undefined, _toConsumableArray(args));\n\t        };\n\t        watchExpression.displayName = \"Formly Watch Expression for field for \" + field.key;\n\t      }\n\t      return watchExpression;\n\t    }\n\t\n\t    function getWatchListener(watcher, field, index) {\n\t      var watchListener = watcher.listener;\n\t      if (angular.isFunction(watchListener)) {\n\t        // wrap the field's watch listener so we can call it with the field as the first arg\n\t        // and the stop function as the last arg as a helper\n\t        var originalListener = watchListener;\n\t        watchListener = function formlyWatchListener() {\n\t          var args = modifyArgs.apply(undefined, [watcher, index].concat(_slice.call(arguments)));\n\t          return originalListener.apply(undefined, _toConsumableArray(args));\n\t        };\n\t        watchListener.displayName = \"Formly Watch Listener for field for \" + field.key;\n\t      }\n\t      return watchListener;\n\t    }\n\t\n\t    function modifyArgs(watcher, index) {\n\t      for (var _len = arguments.length, originalArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n\t        originalArgs[_key - 2] = arguments[_key];\n\t      }\n\t\n\t      return [$scope.fields[index]].concat(originalArgs, [watcher.stopWatching]);\n\t    }\n\t\n\t    function evalCloseToFormlyExpression(expression, val, field, index) {\n\t      var extraLocals = getFormlyFieldLikeLocals(field, index);\n\t      return formlyUtil.formlyEval($scope, expression, val, val, extraLocals);\n\t    }\n\t\n\t    function getFormlyFieldLikeLocals(field, index) {\n\t      // this makes it closer to what a regular formlyExpression would be\n\t      return {\n\t        options: field,\n\t        index: index,\n\t        formState: $scope.options.formState,\n\t        formId: $scope.formId\n\t      };\n\t    }\n\t  }\n\t\n\t  function formlyFormLink(scope, el, attrs) {\n\t    setFormController();\n\t    fixChromeAutocomplete();\n\t\n\t    function setFormController() {\n\t      var formId = attrs.name;\n\t      scope.formId = formId;\n\t      scope.theFormlyForm = scope[formId];\n\t      if (attrs.form) {\n\t        var getter = $parse(attrs.form);\n\t        var setter = getter.assign;\n\t        var parentForm = getter(scope.$parent);\n\t        if (parentForm) {\n\t          scope.theFormlyForm = parentForm;\n\t          if (scope[formId]) {\n\t            scope.theFormlyForm.$removeControl(scope[formId]);\n\t          }\n\t\n\t          // this next line is probably one of the more dangerous things that angular-formly does to improve the\n\t          // API for angular-formly forms. It ensures that the NgModelControllers inside of formly-form will be\n\t          // attached to the form that is passed to formly-form rather than the one that formly-form creates\n\t          // this is necessary because it's confusing to have a step between the form you pass in\n\t          // and the fields in that form. It also is because angular doesn't propagate properties like $submitted down\n\t          // to children forms :-( This line was added to solve this issue:\n\t          // https://github.com/formly-js/angular-formly/issues/287\n\t          // luckily, this is how the formController has been accessed by the NgModelController since angular 1.0.0\n\t          // so I expect it will remain this way for the life of angular 1.x\n\t          el.removeData(\"$formController\");\n\t        } else {\n\t          setter(scope.$parent, scope[formId]);\n\t        }\n\t      }\n\t      if (!scope.theFormlyForm && !formlyConfig.disableWarnings) {\n\t        /* eslint no-console:0 */\n\t        console.warn(formlyUsability.getErrorMessage(\"formly-form-has-no-formcontroller\", \"A formly-form does not have a `form` property. Many functions of the form (like validation) may not work\"));\n\t      }\n\t    }\n\t\n\t    /**\n\t     * chrome autocomplete lameness\n\t     * see https://code.google.com/p/chromium/issues/detail?id=468153#c14\n\t     * ლ(ಠ益ಠლ)   (╯°□°)╯︵ ┻━┻    (◞‸◟；)\n\t     */\n\t    function fixChromeAutocomplete() {\n\t      var global = formlyConfig.extras.removeChromeAutoComplete === true;\n\t      var offInstance = scope.options && scope.options.removeChromeAutoComplete === false;\n\t      var onInstance = scope.options && scope.options.removeChromeAutoComplete === true;\n\t      if (global && !offInstance || onInstance) {\n\t        var input = document.createElement(\"input\");\n\t        input.setAttribute(\"autocomplete\", \"address-level4\");\n\t        input.setAttribute(\"hidden\", \"true\");\n\t        el[0].appendChild(input);\n\t      }\n\t    }\n\t  }\n\t\n\t  // stateless util functions\n\t  function toKebabCase(string) {\n\t    if (string) {\n\t      return string.replace(/([A-Z])/g, function ($1) {\n\t        return \"-\" + $1.toLowerCase();\n\t      });\n\t    } else {\n\t      return \"\";\n\t    }\n\t  }\n\t\n\t  function isFieldGroup(field) {\n\t    return field && !!field.fieldGroup;\n\t  }\n\t}\n\tformlyForm.$inject = [\"formlyUsability\", \"$parse\", \"formlyConfig\", \"$interpolate\"];\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar angular = _interopRequire(__webpack_require__(1));\n\t\n\tvar formlyApiCheck = _interopRequire(__webpack_require__(9));\n\t\n\tvar formlyErrorAndWarningsUrlPrefix = _interopRequire(__webpack_require__(2));\n\t\n\tvar formlyUsability = _interopRequire(__webpack_require__(11));\n\t\n\tvar formlyConfig = _interopRequire(__webpack_require__(10));\n\t\n\tvar formlyValidationMessages = _interopRequire(__webpack_require__(12));\n\t\n\tvar formlyUtil = _interopRequire(__webpack_require__(15));\n\t\n\tvar formlyWarn = _interopRequire(__webpack_require__(16));\n\t\n\tvar formlyCustomValidation = _interopRequire(__webpack_require__(4));\n\t\n\tvar formlyField = _interopRequire(__webpack_require__(5));\n\t\n\tvar formlyFocus = _interopRequire(__webpack_require__(6));\n\t\n\tvar formlyForm = _interopRequire(__webpack_require__(7));\n\t\n\tvar formlyNgModelAttrsManipulator = _interopRequire(__webpack_require__(14));\n\t\n\tvar formlyCustomTags = _interopRequire(__webpack_require__(13));\n\t\n\tvar ngModuleName = \"formly\";\n\t\n\tmodule.exports = ngModuleName;\n\t\n\tvar ngModule = angular.module(ngModuleName, []);\n\t\n\tngModule.constant(\"formlyApiCheck\", formlyApiCheck);\n\tngModule.constant(\"formlyErrorAndWarningsUrlPrefix\", formlyErrorAndWarningsUrlPrefix);\n\tngModule.constant(\"formlyVersion\", (\"6.12.0\")); // <-- webpack variable\n\t\n\tngModule.provider(\"formlyUsability\", formlyUsability);\n\tngModule.provider(\"formlyConfig\", formlyConfig);\n\t\n\tngModule.factory(\"formlyValidationMessages\", formlyValidationMessages);\n\tngModule.factory(\"formlyUtil\", formlyUtil);\n\tngModule.factory(\"formlyWarn\", formlyWarn);\n\t\n\tngModule.directive(\"formlyCustomValidation\", formlyCustomValidation);\n\tngModule.directive(\"formlyField\", formlyField);\n\tngModule.directive(\"formlyFocus\", formlyFocus);\n\tngModule.directive(\"formlyForm\", formlyForm);\n\t\n\tngModule.run(formlyNgModelAttrsManipulator);\n\tngModule.run(formlyCustomTags);\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar angular = _interopRequire(__webpack_require__(1));\n\t\n\tvar apiCheckFactory = _interopRequire(__webpack_require__(18));\n\t\n\tvar apiCheck = apiCheckFactory({\n\t  output: {\n\t    prefix: \"angular-formly:\",\n\t    docsBaseUrl: __webpack_require__(2)\n\t  }\n\t});\n\t\n\tfunction shapeRequiredIfNot(otherProps, propChecker) {\n\t  if (!angular.isArray(otherProps)) {\n\t    otherProps = [otherProps];\n\t  }\n\t  var type = \"specified if these are not specified: `\" + otherProps.join(\", \") + \"` (otherwise it's optional)\";\n\t  function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n\t    var propExists = obj && obj.hasOwnProperty(propName);\n\t    var otherPropsExist = otherProps.some(function (otherProp) {\n\t      return obj && obj.hasOwnProperty(otherProp);\n\t    });\n\t    if (!otherPropsExist && !propExists) {\n\t      return apiCheck.utils.getError(propName, location, type);\n\t    } else if (propExists) {\n\t      return propChecker(prop, propName, location, obj);\n\t    }\n\t  }\n\t  shapeRequiredIfNotDefinition.type = type;\n\t  return apiCheck.utils.checkerHelpers.setupChecker(shapeRequiredIfNotDefinition);\n\t}\n\t\n\tfunction nullable(checker) {\n\t  return apiCheck.oneOfType([apiCheck.oneOf([null]), checker]);\n\t}\n\t\n\tvar formlyExpression = apiCheck.oneOfType([apiCheck.string, apiCheck.func]);\n\tvar specifyWrapperType = nullable(apiCheck.typeOrArrayOf(apiCheck.string));\n\t\n\tvar apiCheckProperty = apiCheck.objectOf(apiCheck.func);\n\t\n\tvar apiCheckInstanceProperty = apiCheck.shape.onlyIf(\"apiCheck\", apiCheck.func.withProperties({\n\t  warn: apiCheck.func,\n\t  \"throw\": apiCheck.func,\n\t  shape: apiCheck.func\n\t}));\n\t\n\tvar apiCheckFunctionProperty = apiCheck.shape.onlyIf(\"apiCheck\", apiCheck.oneOf([\"throw\", \"warn\"]));\n\t\n\tvar formlyWrapperType = apiCheck.shape({\n\t  name: shapeRequiredIfNot(\"types\", apiCheck.string).optional,\n\t  template: apiCheck.shape.ifNot(\"templateUrl\", apiCheck.string).optional,\n\t  templateUrl: apiCheck.shape.ifNot(\"template\", apiCheck.string).optional,\n\t  types: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n\t  overwriteOk: apiCheck.bool.optional,\n\t  validateOptions: apiCheck.func.optional,\n\t  apiCheck: apiCheckProperty.optional,\n\t  apiCheckInstance: apiCheckInstanceProperty.optional,\n\t  apiCheckFunction: apiCheckFunctionProperty.optional,\n\t  apiCheckOptions: apiCheck.object.optional\n\t}).strict;\n\t\n\tvar expressionProperties = apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n\t  expression: formlyExpression,\n\t  message: formlyExpression.optional\n\t}).strict]));\n\t\n\tvar modelChecker = apiCheck.oneOfType([apiCheck.string, apiCheck.object]);\n\t\n\tvar templateManipulators = nullable(apiCheck.shape({\n\t  preWrapper: nullable(apiCheck.arrayOf(apiCheck.func)).optional,\n\t  postWrapper: nullable(apiCheck.arrayOf(apiCheck.func)).optional\n\t}).strict);\n\t\n\tvar fieldOptionsApiShape = {\n\t  $$hashKey: apiCheck.any.optional,\n\t  type: apiCheck.shape.ifNot([\"template\", \"templateUrl\"], apiCheck.string).optional,\n\t  template: apiCheck.shape.ifNot([\"type\", \"templateUrl\"], apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  templateUrl: apiCheck.shape.ifNot([\"type\", \"template\"], apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n\t  model: modelChecker.optional,\n\t  className: apiCheck.string.optional,\n\t  id: apiCheck.string.optional,\n\t  expressionProperties: expressionProperties.optional,\n\t  data: apiCheck.object.optional,\n\t  templateOptions: apiCheck.object.optional,\n\t  wrapper: specifyWrapperType.optional,\n\t  modelOptions: apiCheck.shape({\n\t    updateOn: apiCheck.string.optional,\n\t    debounce: apiCheck.oneOfType([apiCheck.objectOf(apiCheck.number), apiCheck.number]).optional,\n\t    allowInvalid: apiCheck.bool.optional,\n\t    getterSetter: apiCheck.bool.optional,\n\t    timezone: apiCheck.string.optional\n\t  }).optional,\n\t  watcher: apiCheck.typeOrArrayOf(apiCheck.shape({\n\t    expression: formlyExpression.optional,\n\t    listener: formlyExpression\n\t  })).optional,\n\t  validators: apiCheck.objectOf(apiCheck.oneOfType([formlyExpression, apiCheck.shape({\n\t    expression: formlyExpression,\n\t    message: formlyExpression.optional\n\t  }).strict])).optional,\n\t  noFormControl: apiCheck.bool.optional,\n\t  hide: apiCheck.bool.optional,\n\t  hideExpression: formlyExpression.optional,\n\t  ngModelAttrs: apiCheck.objectOf(apiCheck.shape({\n\t    expression: apiCheck.shape.ifNot([\"value\", \"attribute\", \"bound\"], apiCheck.any).optional,\n\t    value: apiCheck.shape.ifNot(\"expression\", apiCheck.any).optional,\n\t    attribute: apiCheck.shape.ifNot(\"expression\", apiCheck.any).optional,\n\t    bound: apiCheck.shape.ifNot(\"expression\", apiCheck.any).optional\n\t  }).strict).optional,\n\t  elementAttributes: apiCheck.objectOf(apiCheck.string).optional,\n\t  optionsTypes: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n\t  link: apiCheck.func.optional,\n\t  controller: apiCheck.oneOfType([apiCheck.string, apiCheck.func, apiCheck.array]).optional,\n\t  validation: apiCheck.shape({\n\t    show: nullable(apiCheck.bool).optional,\n\t    messages: apiCheck.objectOf(formlyExpression).optional,\n\t    errorExistsAndShouldBeVisible: apiCheck.bool.optional\n\t  }).optional,\n\t  formControl: apiCheck.object.optional,\n\t  value: apiCheck.func.optional,\n\t  runExpressions: apiCheck.func.optional,\n\t  templateManipulators: templateManipulators.optional,\n\t  resetModel: apiCheck.func.optional,\n\t  updateInitialValue: apiCheck.func.optional,\n\t  initialValue: apiCheck.any.optional,\n\t  defaultValue: apiCheck.any.optional\n\t};\n\t\n\tvar formlyFieldOptions = apiCheck.shape(fieldOptionsApiShape).strict;\n\t\n\tvar formOptionsApi = apiCheck.shape({\n\t  formState: apiCheck.object.optional,\n\t  resetModel: apiCheck.func.optional,\n\t  updateInitialValue: apiCheck.func.optional,\n\t  removeChromeAutoComplete: apiCheck.bool.optional,\n\t  templateManipulators: templateManipulators.optional,\n\t  wrapper: specifyWrapperType.optional\n\t}).strict;\n\t\n\tvar fieldGroup = apiCheck.shape({\n\t  $$hashKey: apiCheck.any.optional,\n\t  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n\t  // danger. Nested field groups wont get api-checked...\n\t  fieldGroup: apiCheck.arrayOf(apiCheck.oneOfType([formlyFieldOptions, apiCheck.object])),\n\t  className: apiCheck.string.optional,\n\t  options: formOptionsApi.optional,\n\t  hide: apiCheck.bool.optional,\n\t  hideExpression: formlyExpression.optional,\n\t  model: modelChecker.optional,\n\t  form: apiCheck.object.optional,\n\t  elementAttributes: apiCheck.objectOf(apiCheck.string).optional\n\t}).strict;\n\t\n\tvar typeOptionsDefaultOptions = angular.copy(fieldOptionsApiShape);\n\ttypeOptionsDefaultOptions.key = apiCheck.string.optional;\n\t\n\tvar formlyTypeOptions = apiCheck.shape({\n\t  name: apiCheck.string,\n\t  template: apiCheck.shape.ifNot(\"templateUrl\", apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  templateUrl: apiCheck.shape.ifNot(\"template\", apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n\t  controller: apiCheck.oneOfType([apiCheck.func, apiCheck.string, apiCheck.array]).optional,\n\t  link: apiCheck.func.optional,\n\t  defaultOptions: apiCheck.oneOfType([apiCheck.func, apiCheck.shape(typeOptionsDefaultOptions)]).optional,\n\t  \"extends\": apiCheck.string.optional,\n\t  wrapper: specifyWrapperType.optional,\n\t  data: apiCheck.object.optional,\n\t  validateOptions: apiCheck.func.optional,\n\t  apiCheck: apiCheckProperty.optional,\n\t  apiCheckInstance: apiCheckInstanceProperty.optional,\n\t  apiCheckFunction: apiCheckFunctionProperty.optional,\n\t  apiCheckOptions: apiCheck.object.optional,\n\t  overwriteOk: apiCheck.bool.optional\n\t}).strict;\n\t\n\tangular.extend(apiCheck, {\n\t  formlyTypeOptions: formlyTypeOptions, formlyFieldOptions: formlyFieldOptions, formlyExpression: formlyExpression, formlyWrapperType: formlyWrapperType, fieldGroup: fieldGroup, formOptionsApi: formOptionsApi\n\t});\n\t\n\tmodule.exports = apiCheck;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar angular = _interopRequire(__webpack_require__(1));\n\t\n\tvar utils = _interopRequire(__webpack_require__(3));\n\t\n\tmodule.exports = formlyConfig;\n\t\n\t// @ngInject\n\tfunction formlyConfig(formlyUsabilityProvider, formlyApiCheck) {\n\t  var _this2 = this;\n\t\n\t  var typeMap = {};\n\t  var templateWrappersMap = {};\n\t  var defaultWrapperName = \"default\";\n\t  var _this = this;\n\t  var getError = formlyUsabilityProvider.getFormlyError;\n\t\n\t  angular.extend(this, {\n\t    setType: setType,\n\t    getType: getType,\n\t    setWrapper: setWrapper,\n\t    getWrapper: getWrapper,\n\t    getWrapperByType: getWrapperByType,\n\t    removeWrapperByName: removeWrapperByName,\n\t    removeWrappersForType: removeWrappersForType,\n\t    disableWarnings: false,\n\t    extras: {\n\t      disableNgModelAttrsManipulator: false,\n\t      ngModelAttrsManipulatorPreferUnbound: false,\n\t      removeChromeAutoComplete: false,\n\t      defaultHideDirective: \"ng-if\",\n\t      getFieldId: null\n\t    },\n\t    templateManipulators: {\n\t      preWrapper: [],\n\t      postWrapper: []\n\t    },\n\t    $get: function () {\n\t      return _this2;\n\t    }\n\t  });\n\t\n\t  function setType(options) {\n\t    if (angular.isArray(options)) {\n\t      angular.forEach(options, setType);\n\t    } else if (angular.isObject(options)) {\n\t      checkType(options);\n\t      if (options[\"extends\"]) {\n\t        extendTypeOptions(options);\n\t      }\n\t      typeMap[options.name] = options;\n\t    } else {\n\t      throw getError(\"You must provide an object or array for setType. You provided: \" + JSON.stringify(arguments));\n\t    }\n\t  }\n\t\n\t  function checkType(options) {\n\t    formlyApiCheck[\"throw\"](formlyApiCheck.formlyTypeOptions, options, {\n\t      prefix: \"formlyConfig.setType\",\n\t      url: \"settype-validation-failed\"\n\t    });\n\t    if (!options.overwriteOk) {\n\t      checkOverwrite(options.name, typeMap, options, \"types\");\n\t    } else {\n\t      options.overwriteOk = undefined;\n\t    }\n\t  }\n\t\n\t  function extendTypeOptions(options) {\n\t    var extendsType = getType(options[\"extends\"], true, options);\n\t    extendTypeControllerFunction(options, extendsType);\n\t    extendTypeLinkFunction(options, extendsType);\n\t    extendTypeValidateOptionsFunction(options, extendsType);\n\t    extendTypeDefaultOptions(options, extendsType);\n\t    utils.reverseDeepMerge(options, extendsType);\n\t    extendTemplate(options, extendsType);\n\t  }\n\t\n\t  function extendTemplate(options, extendsType) {\n\t    if (options.template && extendsType.templateUrl) {\n\t      delete options.templateUrl;\n\t    } else if (options.templateUrl && extendsType.template) {\n\t      delete options.template;\n\t    }\n\t  }\n\t\n\t  function extendTypeControllerFunction(options, extendsType) {\n\t    var extendsCtrl = extendsType.controller;\n\t    if (!angular.isDefined(extendsCtrl)) {\n\t      return;\n\t    }\n\t    var optionsCtrl = options.controller;\n\t    if (angular.isDefined(optionsCtrl)) {\n\t      options.controller = function ($scope, $controller) {\n\t        $controller(extendsCtrl, { $scope: $scope });\n\t        $controller(optionsCtrl, { $scope: $scope });\n\t      };\n\t      options.controller.$inject = [\"$scope\", \"$controller\"];\n\t    } else {\n\t      options.controller = extendsCtrl;\n\t    }\n\t  }\n\t\n\t  function extendTypeLinkFunction(options, extendsType) {\n\t    var extendsFn = extendsType.link;\n\t    if (!angular.isDefined(extendsFn)) {\n\t      return;\n\t    }\n\t    var optionsFn = options.link;\n\t    if (angular.isDefined(optionsFn)) {\n\t      options.link = function () {\n\t        extendsFn.apply(undefined, arguments);\n\t        optionsFn.apply(undefined, arguments);\n\t      };\n\t    } else {\n\t      options.link = extendsFn;\n\t    }\n\t  }\n\t\n\t  function extendTypeValidateOptionsFunction(options, extendsType) {\n\t    var extendsFn = extendsType.validateOptions;\n\t    if (!angular.isDefined(extendsFn)) {\n\t      return;\n\t    }\n\t    var optionsFn = options.validateOptions;\n\t    var originalDefaultOptions = options.defaultOptions;\n\t    if (angular.isDefined(optionsFn)) {\n\t      options.validateOptions = function (opts) {\n\t        optionsFn(opts);\n\t        var mergedOptions = angular.copy(opts);\n\t        var defaultOptions = originalDefaultOptions;\n\t        if (defaultOptions) {\n\t          if (angular.isFunction(defaultOptions)) {\n\t            defaultOptions = defaultOptions(mergedOptions);\n\t          }\n\t          utils.reverseDeepMerge(mergedOptions, defaultOptions);\n\t        }\n\t        extendsFn(mergedOptions);\n\t      };\n\t    } else {\n\t      options.validateOptions = extendsFn;\n\t    }\n\t  }\n\t\n\t  function extendTypeDefaultOptions(options, extendsType) {\n\t    var extendsDO = extendsType.defaultOptions;\n\t    if (!angular.isDefined(extendsDO)) {\n\t      return;\n\t    }\n\t    var optionsDO = options.defaultOptions;\n\t    var optionsDOIsFn = angular.isFunction(optionsDO);\n\t    var extendsDOIsFn = angular.isFunction(extendsDO);\n\t    if (extendsDOIsFn) {\n\t      options.defaultOptions = function defaultOptions(opts) {\n\t        var extendsDefaultOptions = extendsDO(opts);\n\t        var mergedDefaultOptions = {};\n\t        utils.reverseDeepMerge(mergedDefaultOptions, opts, extendsDefaultOptions);\n\t        var extenderOptionsDefaultOptions = optionsDO;\n\t        if (optionsDOIsFn) {\n\t          extenderOptionsDefaultOptions = extenderOptionsDefaultOptions(mergedDefaultOptions);\n\t        }\n\t        utils.reverseDeepMerge(extendsDefaultOptions, extenderOptionsDefaultOptions);\n\t        return extendsDefaultOptions;\n\t      };\n\t    } else if (optionsDOIsFn) {\n\t      options.defaultOptions = function defaultOptions(opts) {\n\t        var newDefaultOptions = {};\n\t        utils.reverseDeepMerge(newDefaultOptions, opts, extendsDO);\n\t        return optionsDO(newDefaultOptions);\n\t      };\n\t    }\n\t  }\n\t\n\t  function getType(name, throwError, errorContext) {\n\t    if (!name) {\n\t      return undefined;\n\t    }\n\t    var type = typeMap[name];\n\t    if (!type && throwError === true) {\n\t      throw getError(\"There is no type by the name of \\\"\" + name + \"\\\": \" + JSON.stringify(errorContext));\n\t    } else {\n\t      return type;\n\t    }\n\t  }\n\t\n\t  function setWrapper(_x, _x2) {\n\t    var _again = true;\n\t\n\t    _function: while (_again) {\n\t      _again = false;\n\t      var options = _x,\n\t          name = _x2;\n\t\n\t      if (angular.isArray(options)) {\n\t        return options.map(function (wrapperOptions) {\n\t          return setWrapper(wrapperOptions);\n\t        });\n\t      } else if (angular.isObject(options)) {\n\t        options.types = getOptionsTypes(options);\n\t        options.name = getOptionsName(options, name);\n\t        checkWrapperAPI(options);\n\t        templateWrappersMap[options.name] = options;\n\t        return options;\n\t      } else if (angular.isString(options)) {\n\t        _x = {\n\t          template: options,\n\t          name: name\n\t        };\n\t        _again = true;\n\t        continue _function;\n\t      }\n\t    }\n\t  }\n\t\n\t  function getOptionsTypes(options) {\n\t    if (angular.isString(options.types)) {\n\t      return [options.types];\n\t    }\n\t    if (!angular.isDefined(options.types)) {\n\t      return [];\n\t    } else {\n\t      return options.types;\n\t    }\n\t  }\n\t\n\t  function getOptionsName(options, name) {\n\t    return options.name || name || options.types.join(\" \") || defaultWrapperName;\n\t  }\n\t\n\t  function checkWrapperAPI(options) {\n\t    formlyUsabilityProvider.checkWrapper(options);\n\t    if (options.template) {\n\t      formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n\t    }\n\t    if (!options.overwriteOk) {\n\t      checkOverwrite(options.name, templateWrappersMap, options, \"templateWrappers\");\n\t    } else {\n\t      delete options.overwriteOk;\n\t    }\n\t    checkWrapperTypes(options);\n\t  }\n\t\n\t  function checkWrapperTypes(options) {\n\t    var shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);\n\t    if (shouldThrow) {\n\t      throw getError(\"Attempted to create a template wrapper with types that is not a string or an array of strings\");\n\t    }\n\t  }\n\t\n\t  function checkOverwrite(property, object, newValue, objectName) {\n\t    if (object.hasOwnProperty(property)) {\n\t      warn([\"Attempting to overwrite \" + property + \" on \" + objectName + \" which is currently\", \"\" + JSON.stringify(object[property]) + \" with \" + JSON.stringify(newValue), \"To supress this warning, specify the property \\\"overwriteOk: true\\\"\"].join(\" \"));\n\t    }\n\t  }\n\t\n\t  function getWrapper(name) {\n\t    return templateWrappersMap[name || defaultWrapperName];\n\t  }\n\t\n\t  function getWrapperByType(type) {\n\t    /* jshint maxcomplexity:6 */\n\t    var wrappers = [];\n\t    for (var name in templateWrappersMap) {\n\t      if (templateWrappersMap.hasOwnProperty(name)) {\n\t        if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n\t          wrappers.push(templateWrappersMap[name]);\n\t        }\n\t      }\n\t    }\n\t    return wrappers;\n\t  }\n\t\n\t  function removeWrapperByName(name) {\n\t    var wrapper = templateWrappersMap[name];\n\t    delete templateWrappersMap[name];\n\t    return wrapper;\n\t  }\n\t\n\t  function removeWrappersForType(type) {\n\t    var wrappers = getWrapperByType(type);\n\t    if (!wrappers) {\n\t      return undefined;\n\t    }\n\t    if (!angular.isArray(wrappers)) {\n\t      return removeWrapperByName(wrappers.name);\n\t    } else {\n\t      wrappers.forEach(function (wrapper) {\n\t        return removeWrapperByName(wrapper.name);\n\t      });\n\t      return wrappers;\n\t    }\n\t  }\n\t\n\t  function warn() {\n\t    if (!_this.disableWarnings) {\n\t      /* eslint no-console:0 */\n\t      console.warn.apply(console, arguments);\n\t    }\n\t  }\n\t}\n\tformlyConfig.$inject = [\"formlyUsabilityProvider\", \"formlyApiCheck\"];\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar angular = _interopRequire(__webpack_require__(1));\n\t\n\tmodule.exports = formlyUsability;\n\t\n\t// @ngInject\n\tfunction formlyUsability(formlyApiCheck, formlyErrorAndWarningsUrlPrefix) {\n\t  var _this = this;\n\t\n\t  angular.extend(this, {\n\t    getFormlyError: getFormlyError,\n\t    getFieldError: getFieldError,\n\t    checkWrapper: checkWrapper,\n\t    checkWrapperTemplate: checkWrapperTemplate,\n\t    getErrorMessage: getErrorMessage,\n\t    $get: function () {\n\t      return _this;\n\t    }\n\t  });\n\t\n\t  function getFieldError(errorInfoSlug, message, field) {\n\t    if (arguments.length < 3) {\n\t      field = message;\n\t      message = errorInfoSlug;\n\t      errorInfoSlug = null;\n\t    }\n\t    return new Error(getErrorMessage(errorInfoSlug, message) + (\" Field definition: \" + angular.toJson(field)));\n\t  }\n\t\n\t  function getFormlyError(errorInfoSlug, message) {\n\t    if (!message) {\n\t      message = errorInfoSlug;\n\t      errorInfoSlug = null;\n\t    }\n\t    return new Error(getErrorMessage(errorInfoSlug, message));\n\t  }\n\t\n\t  function getErrorMessage(errorInfoSlug, message) {\n\t    var url = \"\";\n\t    if (errorInfoSlug !== null) {\n\t      url = \"\" + formlyErrorAndWarningsUrlPrefix + \"\" + errorInfoSlug;\n\t    }\n\t    return \"Formly Error: \" + message + \". \" + url;\n\t  }\n\t\n\t  function checkWrapper(wrapper) {\n\t    formlyApiCheck[\"throw\"](formlyApiCheck.formlyWrapperType, wrapper, {\n\t      prefix: \"formlyConfig.setWrapper\",\n\t      urlSuffix: \"setwrapper-validation-failed\"\n\t    });\n\t  }\n\t\n\t  function checkWrapperTemplate(template, additionalInfo) {\n\t    var formlyTransclude = \"<formly-transclude></formly-transclude>\";\n\t    if (template.indexOf(formlyTransclude) === -1) {\n\t      throw getFormlyError(\"Template wrapper templates must use \\\"\" + formlyTransclude + \"\\\" somewhere in them. \" + (\"This one does not have \\\"<formly-transclude></formly-transclude>\\\" in it: \" + template) + \"\\n\" + (\"Additional information: \" + JSON.stringify(additionalInfo)));\n\t    }\n\t  }\n\t}\n\tformlyUsability.$inject = [\"formlyApiCheck\", \"formlyErrorAndWarningsUrlPrefix\"];\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tmodule.exports = formlyValidationMessages;\n\t\n\t// @ngInject\n\tfunction formlyValidationMessages() {\n\t\n\t  var validationMessages = {\n\t    addTemplateOptionValueMessage: addTemplateOptionValueMessage,\n\t    addStringMessage: addStringMessage,\n\t    messages: {}\n\t  };\n\t\n\t  return validationMessages;\n\t\n\t  function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n\t    validationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n\t  }\n\t\n\t  function addStringMessage(name, string) {\n\t    validationMessages.messages[name] = function () {\n\t      return string;\n\t    };\n\t  }\n\t\n\t  function templateOptionValue(prop, prefix, suffix, alternate) {\n\t    return function getValidationMessage(viewValue, modelValue, scope) {\n\t      if (scope.options.templateOptions[prop]) {\n\t        return \"\" + prefix + \" \" + scope.options.templateOptions[prop] + \" \" + suffix;\n\t      } else {\n\t        return alternate;\n\t      }\n\t    };\n\t  }\n\t}\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar angular = _interopRequire(__webpack_require__(1));\n\t\n\tmodule.exports = addCustomTags;\n\t\n\t// @ngInject\n\tfunction addCustomTags($document) {\n\t  if ($document && $document.get) {\n\t    (function () {\n\t      // IE8 check ->\n\t      // http://stackoverflow.com/questions/10964966/detect-ie-version-prior-to-v9-in-javascript/10965203#10965203\n\t      var document = $document.get(0);\n\t      var div = document.createElement(\"div\");\n\t      div.innerHTML = \"<!--[if lt IE 9]><i></i><![endif]-->\";\n\t      var isIeLessThan9 = div.getElementsByTagName(\"i\").length === 1;\n\t\n\t      if (isIeLessThan9) {\n\t        // add the custom elements that we need for formly\n\t        var customElements = [\"formly-field\", \"formly-form\", \"formly-custom-validation\", \"formly-focus\", \"formly-transpose\"];\n\t        angular.forEach(customElements, function (el) {\n\t          document.createElement(el);\n\t        });\n\t      }\n\t    })();\n\t  }\n\t}\n\taddCustomTags.$inject = [\"$document\"];\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar angular = _interopRequire(__webpack_require__(1));\n\t\n\tmodule.exports = addFormlyNgModelAttrsManipulator;\n\t\n\t// @ngInject\n\tfunction addFormlyNgModelAttrsManipulator(formlyConfig, $interpolate) {\n\t  if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n\t    return;\n\t  }\n\t  formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n\t\n\t  function ngModelAttrsManipulator(template, options, scope) {\n\t    /* jshint maxcomplexity:6 */\n\t    var el = document.createElement(\"div\");\n\t    var data = options.data;\n\t    if (data.skipNgModelAttrsManipulator === true) {\n\t      return template;\n\t    }\n\t    el.innerHTML = template;\n\t    var modelNodes = el.querySelectorAll(\"[ng-model], [data-ng-model]\");\n\t    if (!modelNodes || !modelNodes.length) {\n\t      return template;\n\t    }\n\t\n\t    addIfNotPresent(modelNodes, \"id\", scope.id);\n\t    addIfNotPresent(modelNodes, \"name\", scope.id);\n\t\n\t    addValidation();\n\t    addModelOptions();\n\t    addTemplateOptionsAttrs();\n\t\n\t    return el.innerHTML;\n\t\n\t    function addValidation() {\n\t      if (angular.isDefined(options.validators) || angular.isDefined(options.validation.messages)) {\n\t        addIfNotPresent(modelNodes, \"formly-custom-validation\", \"\");\n\t      }\n\t    }\n\t\n\t    function addModelOptions() {\n\t      if (angular.isDefined(options.modelOptions)) {\n\t        addIfNotPresent(modelNodes, \"ng-model-options\", \"options.modelOptions\");\n\t        if (options.modelOptions.getterSetter) {\n\t          angular.forEach(modelNodes, function (node) {\n\t            node.setAttribute(\"ng-model\", \"options.value\");\n\t          });\n\t        }\n\t      }\n\t    }\n\t\n\t    function addTemplateOptionsAttrs() {\n\t      if (!options.templateOptions && !options.expressionProperties) {\n\t        // no need to run these if there are no templateOptions or expressionProperties\n\t        return;\n\t      }\n\t      var to = options.templateOptions || {};\n\t      var ep = options.expressionProperties || {};\n\t\n\t      var ngModelAttributes = getBuiltInAttributes();\n\t\n\t      // extend with the user's specifications winning\n\t      angular.extend(ngModelAttributes, options.ngModelAttrs);\n\t\n\t      // Feel free to make this more simple :-)\n\t      angular.forEach(ngModelAttributes, function (val, name) {\n\t        /* eslint complexity:[2, 14] */\n\t        var attrVal = undefined;\n\t        var attrName = undefined;\n\t        var ref = \"options.templateOptions['\" + name + \"']\";\n\t        var toVal = to[name];\n\t        var epVal = getEpValue(ep, name);\n\t\n\t        var inTo = angular.isDefined(toVal);\n\t        var inEp = angular.isDefined(epVal);\n\t        if (val.value) {\n\t          // I realize this looks backwards, but it's right, trust me...\n\t          attrName = val.value;\n\t          attrVal = name;\n\t        } else if (val.expression && inTo) {\n\t          attrName = val.expression;\n\t          if (angular.isString(to[name])) {\n\t            attrVal = \"$eval(\" + ref + \")\";\n\t          } else if (angular.isFunction(to[name])) {\n\t            attrVal = \"\" + ref + \"(model[options.key], options, this, $event)\";\n\t          } else {\n\t            throw new Error(\"options.templateOptions.\" + name + \" must be a string or function: \" + JSON.stringify(options));\n\t          }\n\t        } else if (val.bound && inEp) {\n\t          attrName = val.bound;\n\t          attrVal = ref;\n\t        } else if ((val.attribute || val.boolean) && inEp) {\n\t          attrName = val.attribute || val.boolean;\n\t          attrVal = \"\" + $interpolate.startSymbol() + \"\" + ref + \"\" + $interpolate.endSymbol();\n\t        } else if (val.attribute && inTo) {\n\t          attrName = val.attribute;\n\t          attrVal = toVal;\n\t        } else if (val.boolean) {\n\t          if (inTo && !inEp && toVal) {\n\t            attrName = val.boolean;\n\t            attrVal = true;\n\t          } else {}\n\t        } else if (val.bound && inTo) {\n\t          attrName = val.bound;\n\t          attrVal = ref;\n\t        }\n\t\n\t        if (angular.isDefined(attrName) && angular.isDefined(attrVal)) {\n\t          addIfNotPresent(modelNodes, attrName, attrVal);\n\t        }\n\t      });\n\t    }\n\t  }\n\t\n\t  // Utility functions\n\t  function getBuiltInAttributes() {\n\t    var ngModelAttributes = {\n\t      focus: {\n\t        attribute: \"formly-focus\"\n\t      }\n\t    };\n\t    var boundOnly = [];\n\t    var bothBooleanAndBound = [\"required\", \"disabled\"];\n\t    var bothAttributeAndBound = [\"pattern\", \"minlength\"];\n\t    var expressionOnly = [\"change\", \"keydown\", \"keyup\", \"keypress\", \"click\", \"focus\", \"blur\"];\n\t    var attributeOnly = [\"placeholder\", \"min\", \"max\", \"tabindex\", \"type\"];\n\t    if (formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound) {\n\t      bothAttributeAndBound.push(\"maxlength\");\n\t    } else {\n\t      boundOnly.push(\"maxlength\");\n\t    }\n\t\n\t    angular.forEach(boundOnly, function (item) {\n\t      ngModelAttributes[item] = { bound: \"ng-\" + item };\n\t    });\n\t\n\t    angular.forEach(bothBooleanAndBound, function (item) {\n\t      ngModelAttributes[item] = { boolean: item, bound: \"ng-\" + item };\n\t    });\n\t\n\t    angular.forEach(bothAttributeAndBound, function (item) {\n\t      ngModelAttributes[item] = { attribute: item, bound: \"ng-\" + item };\n\t    });\n\t\n\t    angular.forEach(expressionOnly, function (item) {\n\t      var propName = \"on\" + item.substr(0, 1).toUpperCase() + item.substr(1);\n\t      ngModelAttributes[propName] = { expression: \"ng-\" + item };\n\t    });\n\t\n\t    angular.forEach(attributeOnly, function (item) {\n\t      ngModelAttributes[item] = { attribute: item };\n\t    });\n\t    return ngModelAttributes;\n\t  }\n\t\n\t  function getEpValue(ep, name) {\n\t    return ep[\"templateOptions.\" + name] || ep[\"templateOptions['\" + name + \"']\"] || ep[\"templateOptions[\\\"\" + name + \"\\\"]\"];\n\t  }\n\t\n\t  function addIfNotPresent(nodes, attr, val) {\n\t    angular.forEach(nodes, function (node) {\n\t      if (!node.getAttribute(attr)) {\n\t        node.setAttribute(attr, val);\n\t      }\n\t    });\n\t  }\n\t}\n\taddFormlyNgModelAttrsManipulator.$inject = [\"formlyConfig\", \"$interpolate\"];\n\n\t/* eslint no-empty:0 */\n\t// empty to illustrate that a boolean will not be added via val.bound\n\t// if you want it added via val.bound, then put it in expressionProperties\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _interopRequire = function (obj) { return obj && obj.__esModule ? obj[\"default\"] : obj; };\n\t\n\tvar utils = _interopRequire(__webpack_require__(3));\n\t\n\tmodule.exports = formlyUtil;\n\t\n\t// @ngInject\n\tfunction formlyUtil() {\n\t  return utils;\n\t}\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tvar _toConsumableArray = function (arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } };\n\t\n\tmodule.exports = formlyWarn;\n\t\n\t// @ngInject\n\tfunction formlyWarn(formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n\t  return function warn() {\n\t    if (!formlyConfig.disableWarnings) {\n\t      var args = Array.prototype.slice.call(arguments);\n\t      var warnInfoSlug = args.shift();\n\t      args.unshift(\"Formly Warning:\");\n\t      args.push(\"\" + formlyErrorAndWarningsUrlPrefix + \"\" + warnInfoSlug);\n\t      $log.warn.apply($log, _toConsumableArray(args));\n\t    }\n\t  };\n\t}\n\tformlyWarn.$inject = [\"formlyConfig\", \"formlyErrorAndWarningsUrlPrefix\", \"$log\"];\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_17__;\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_18__;\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** formly.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap f6efc4a054f70aab07a6\n **/","import index from './index.common';\nexport default index;\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./index.js\n **/","// some versions of angular don't export the angular module properly,\n// so we get it from window in this case.\nvar angular = require('angular');\n\nif (!angular.version) {\n  angular = window.angular;\n}\nexport default angular;\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./angular-fix/index.js\n **/","import angular from 'angular-fix';\n\nexport default {formlyEval, getFieldId, reverseDeepMerge, findByNodeName, arrayify, extendFunction};\n\nfunction formlyEval(scope, expression, $modelValue, $viewValue, extraLocals) {\n  if (angular.isFunction(expression)) {\n    return expression($viewValue, $modelValue, scope, extraLocals);\n  } else {\n    return scope.$eval(expression, angular.extend({$viewValue, $modelValue}, extraLocals));\n  }\n}\n\nfunction getFieldId(formId, options, index) {\n  if (options.id) {\n    return options.id;\n  }\n  var type = options.type;\n  if (!type && options.template) {\n    type = 'template';\n  } else if (!type && options.templateUrl) {\n    type = 'templateUrl';\n  }\n\n  return [formId, type, options.key, index].join('_');\n}\n\n\nfunction reverseDeepMerge(dest) {\n  angular.forEach(arguments, (src, index) => {\n    if (!index) {\n      return;\n    }\n    angular.forEach(src, (val, prop) => {\n      if (!angular.isDefined(dest[prop])) {\n        dest[prop] = angular.copy(val);\n      } else if (objAndSameType(dest[prop], val)) {\n        reverseDeepMerge(dest[prop], val);\n      }\n    });\n  });\n}\n\nfunction objAndSameType(obj1, obj2) {\n  return angular.isObject(obj1) && angular.isObject(obj2) &&\n    Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2);\n}\n\n// recurse down a node tree to find a node with matching nodeName, for custom tags jQuery.find doesn't work in IE8\nfunction findByNodeName(el, nodeName) {\n  if (!el.prop) { // not a jQuery or jqLite object -> wrap it\n    el = angular.element(el);\n  }\n\n  if (el.prop('nodeName') === nodeName.toUpperCase()) {\n    return el;\n  }\n\n  var c = el.children();\n  for(var i = 0; c && i < c.length; i++) {\n    var node = findByNodeName(c[i], nodeName);\n    if (node) {\n      return node;\n    }\n  }\n}\n\n\nfunction arrayify(obj) {\n  if (obj && !angular.isArray(obj)) {\n    obj = [obj];\n  } else if (!obj) {\n    obj = [];\n  }\n  return obj;\n}\n\n\nfunction extendFunction(...fns) {\n  return function extendedFunction() {\n    var args = arguments;\n    fns.forEach(fn => fn.apply(null, args));\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./other/utils.js\n **/","import angular from 'angular-fix';\nexport default formlyCustomValidation;\n\n// @ngInject\nfunction formlyCustomValidation(formlyUtil, $q) {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: function formlyCustomValidationLink(scope, el, attrs, ctrl) {\n      const opts = scope.options;\n      if (opts.validators) {\n        checkValidators(opts.validators);\n      }\n      opts.validation.messages = opts.validation.messages || {};\n      angular.forEach(opts.validation.messages, (message, key) => {\n        opts.validation.messages[key] = () => {\n          return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n        };\n      });\n\n\n      var useNewValidatorsApi = ctrl.hasOwnProperty('$validators') && !attrs.hasOwnProperty('useParsers');\n      angular.forEach(opts.validators, function addValidatorToPipeline(validator, name) {\n        var message = validator.message;\n        if (message) {\n          opts.validation.messages[name] = () => {\n            return formlyUtil.formlyEval(scope, message, ctrl.$modelValue, ctrl.$viewValue);\n          };\n        }\n        validator = angular.isObject(validator) ? validator.expression : validator;\n        var isPossiblyAsync = !angular.isString(validator);\n        if (useNewValidatorsApi) {\n          setupWithValidators();\n        } else {\n          setupWithParsers();\n        }\n\n        function setupWithValidators() {\n          var validatorCollection = isPossiblyAsync ? '$asyncValidators' : '$validators';\n          ctrl[validatorCollection][name] = function evalValidity(modelValue, viewValue) {\n            var value = formlyUtil.formlyEval(scope, validator, modelValue, viewValue);\n            if (isPossiblyAsync) {\n              return isPromiseLike(value) ? value : value ? $q.when(value) : $q.reject(value);\n            } else {\n              return value;\n            }\n          };\n        }\n\n        function setupWithParsers() {\n          let inFlightValidator;\n          ctrl.$parsers.unshift(function evalValidityOfParser(viewValue) {\n            var isValid = formlyUtil.formlyEval(scope, validator, ctrl.$modelValue, viewValue);\n            if (isPromiseLike(isValid)) {\n              ctrl.$pending = ctrl.$pending || {};\n              ctrl.$pending[name] = true;\n              inFlightValidator = isValid;\n              isValid.then(() => {\n                if (inFlightValidator === isValid) {\n                  ctrl.$setValidity(name, true);\n                }\n              }).catch(() => {\n                if (inFlightValidator === isValid) {\n                  ctrl.$setValidity(name, false);\n                }\n              }).finally(() => {\n                if (Object.keys(ctrl.$pending).length === 1) {\n                  delete ctrl.$pending;\n                } else {\n                  delete ctrl.$pending[name];\n                }\n              });\n            } else {\n              ctrl.$setValidity(name, isValid);\n            }\n            return viewValue;\n          });\n        }\n      });\n    }\n  };\n\n  function isPromiseLike(obj) {\n    return obj && angular.isFunction(obj.then);\n  }\n\n  function checkValidators(validators) {\n    var allowedProperties = ['expression', 'message'];\n    var validatorsWithExtraProps = {};\n    angular.forEach(validators, (validator, name) => {\n      if (angular.isString(validator)) {\n        return;\n      }\n      var extraProps = [];\n      angular.forEach(validator, (v, key) => {\n        if (allowedProperties.indexOf(key) === -1) {\n          extraProps.push(key);\n        }\n      });\n      if (extraProps.length) {\n        validatorsWithExtraProps[name] = extraProps;\n      }\n    });\n    if (Object.keys(validatorsWithExtraProps).length) {\n      throw new Error([\n        `Validators are only allowed to be functions or objects that have ${allowedProperties.join(', ')}.`,\n        `You provided some extra properties: ${JSON.stringify(validatorsWithExtraProps)}`\n      ].join(' '));\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./directives/formly-custom-validation.js\n **/","import angular from 'angular-fix';\n\nexport default formlyField;\n\n/**\n * @ngdoc directive\n * @name formlyField\n * @restrict AE\n */\n// @ngInject\nfunction formlyField($http, $q, $compile, $templateCache, $interpolate, formlyConfig, formlyValidationMessages,\n                     formlyApiCheck, formlyUtil, formlyUsability, formlyWarn) {\n  const {arrayify} = formlyUtil;\n\n  return {\n    restrict: 'AE',\n    transclude: true,\n    scope: {\n      options: '=',\n      model: '=',\n      formId: '@', // TODO remove formId in a breaking release\n      index: '=?',\n      fields: '=?',\n      formState: '=?',\n      formOptions: '=?',\n      form: '=?' // TODO require form in a breaking release\n    },\n    controller: FormlyFieldController,\n    link: fieldLink\n  };\n\n\n  // @ngInject\n  function FormlyFieldController($scope, $timeout, $parse, $controller) {\n    /* eslint max-statements:[2, 31] */\n    if ($scope.options.fieldGroup) {\n      setupFieldGroup();\n      return;\n    }\n\n    var fieldType = getFieldType($scope.options);\n    simplifyLife($scope.options);\n    mergeFieldOptionsWithTypeDefaults($scope.options, fieldType);\n    extendOptionsWithDefaults($scope.options, $scope.index);\n    checkApi($scope.options);\n    // set field id to link labels and fields\n\n    // initalization\n    setFieldId();\n    setDefaultValue();\n    setInitialValue();\n    runExpressions();\n    addModelWatcher($scope, $scope.options);\n    addValidationMessages($scope.options);\n    invokeControllers($scope, $scope.options, fieldType);\n\n    // function definitions\n    function runExpressions() {\n      // must run on next tick to make sure that the current value is correct.\n      $timeout(function runExpressionsOnNextTick() {\n        var field = $scope.options;\n        var currentValue = valueGetterSetter();\n        angular.forEach(field.expressionProperties, function runExpression(expression, prop) {\n          var setter = $parse(prop).assign;\n          var promise = $q.when(formlyUtil.formlyEval($scope, expression, currentValue, currentValue));\n          promise.then(function setFieldValue(value) {\n            setter(field, value);\n          });\n        });\n      });\n    }\n\n    function valueGetterSetter(newVal) {\n      if (!$scope.model || !$scope.options.key) {\n        return undefined;\n      }\n      if (angular.isDefined(newVal)) {\n        $scope.model[$scope.options.key] = newVal;\n      }\n      return $scope.model[$scope.options.key];\n    }\n\n    function simplifyLife(options) {\n      // add a few empty objects (if they don't already exist) so you don't have to undefined check everywhere\n      formlyUtil.reverseDeepMerge(options, {\n        data: {},\n        templateOptions: {},\n        validation: {}\n      });\n      // create $scope.to so template authors can reference to instead of $scope.options.templateOptions\n      $scope.to = $scope.options.templateOptions;\n      $scope.formOptions = $scope.formOptions || {};\n    }\n\n    function setFieldId() {\n      if (angular.isFunction(formlyConfig.extras.getFieldId)) {\n        $scope.id = formlyConfig.extras.getFieldId($scope.options, $scope.model, $scope);\n      } else {\n        const formName = ($scope.form && $scope.form.$name) || $scope.formId;\n        $scope.id = formlyUtil.getFieldId(formName, $scope.options, $scope.index);\n      }\n      $scope.options.id = $scope.id;\n    }\n\n    function setDefaultValue() {\n      if (angular.isDefined($scope.options.defaultValue) && !angular.isDefined($scope.model[$scope.options.key])) {\n        $scope.model[$scope.options.key] = $scope.options.defaultValue;\n      }\n    }\n\n    function setInitialValue() {\n      $scope.options.initialValue = $scope.model && $scope.model[$scope.options.key];\n    }\n\n    function mergeFieldOptionsWithTypeDefaults(options, type) {\n      if (type) {\n        mergeOptions(options, type.defaultOptions);\n      }\n      var properOrder = arrayify(options.optionsTypes).reverse(); // so the right things are overridden\n      angular.forEach(properOrder, typeName => {\n        mergeOptions(options, formlyConfig.getType(typeName, true, options).defaultOptions);\n      });\n    }\n\n    function mergeOptions(options, extraOptions) {\n      if (extraOptions) {\n        if (angular.isFunction(extraOptions)) {\n          extraOptions = extraOptions(options);\n        }\n        formlyUtil.reverseDeepMerge(options, extraOptions);\n      }\n    }\n\n    function extendOptionsWithDefaults(options, index) {\n      const key = options.key || index || 0;\n      angular.extend(options, {\n        // attach the key in case the formly-field directive is used directly\n        key,\n        value: valueGetterSetter,\n        runExpressions,\n        resetModel,\n        updateInitialValue\n      });\n    }\n\n    // initialization functions\n    function addModelWatcher(scope, options) {\n      if (options.model) {\n        scope.$watch('options.model', runExpressions, true);\n      }\n    }\n\n    function resetModel() {\n      $scope.model[$scope.options.key] = $scope.options.initialValue;\n      if ($scope.options.formControl) {\n        if(angular.isArray($scope.options.formControl)){\n          angular.forEach($scope.options.formControl, function(formControl){\n            resetFormControl(formControl, true);\n          });\n        } else {\n          resetFormControl($scope.options.formControl);\n        }\n      }\n    }\n\n    function resetFormControl(formControl, isMultiNgModel){\n      if(!isMultiNgModel){\n        formControl.$setViewValue($scope.model[$scope.options.key]);\n      }\n\n      formControl.$render();\n      formControl.$setUntouched();\n      formControl.$setPristine();\n\n      // To prevent breaking change requiring a digest to reset $viewModel\n      if(!$scope.$root.$$phase){\n        $scope.$digest();\n      }\n    }\n\n    function updateInitialValue() {\n      $scope.options.initialValue = $scope.model[$scope.options.key];\n    }\n\n    function addValidationMessages(options) {\n      options.validation.messages = options.validation.messages || {};\n      angular.forEach(formlyValidationMessages.messages, function createFunctionForMessage(expression, name) {\n        if (!options.validation.messages[name]) {\n          options.validation.messages[name] = function evaluateMessage(viewValue, modelValue, scope) {\n            return formlyUtil.formlyEval(scope, expression, modelValue, viewValue);\n          };\n        }\n      });\n    }\n\n    function invokeControllers(scope, options = {}, type = {}) {\n      angular.forEach([type.controller, options.controller], controller => {\n        if (controller) {\n          $controller(controller, {$scope: scope});\n        }\n      });\n    }\n\n    function setupFieldGroup() {\n      $scope.options.options = $scope.options.options || {};\n      $scope.options.options.formState = $scope.formState;\n    }\n  }\n\n\n\n  // link function\n  function fieldLink(scope, el) {\n    if (scope.options.fieldGroup) {\n      setFieldGroupTemplate();\n      return;\n    }\n\n    addAttributes();\n    addClasses();\n\n    var type = getFieldType(scope.options);\n    var args = arguments;\n    var thusly = this;\n    var fieldCount = 0;\n    const fieldManipulators = getManipulators(scope.options, scope.formOptions);\n    getFieldTemplate(scope.options)\n      .then(runManipulators(fieldManipulators.preWrapper))\n      .then(transcludeInWrappers(scope.options, scope.formOptions))\n      .then(runManipulators(fieldManipulators.postWrapper))\n      .then(setElementTemplate)\n      .then(watchFormControl)\n      .then(callLinkFunctions)\n      .catch(error => {\n        formlyWarn(\n          'there-was-a-problem-setting-the-template-for-this-field',\n          'There was a problem setting the template for this field ',\n          scope.options,\n          error\n        );\n      });\n\n    function setFieldGroupTemplate() {\n      checkFieldGroupApi(scope.options);\n      el.addClass('formly-field-group');\n      let extraAttributes = '';\n      if (scope.options.elementAttributes) {\n        extraAttributes = Object.keys(scope.options.elementAttributes).map(key => {\n          return `${key}=\"${scope.options.elementAttributes[key]}\"`;\n        }).join(' ');\n      }\n      let modelValue = 'model';\n      if (scope.options.key) {\n        modelValue = `model['${scope.options.key}']`;\n      }\n      setElementTemplate(`\n          <formly-form model=\"${modelValue}\"\n                       fields=\"options.fieldGroup\"\n                       options=\"options.options\"\n                       form=\"options.form\"\n                       class=\"${scope.options.className}\"\n                       ${extraAttributes}\n                       is-field-group>\n          </formly-form>\n        `);\n    }\n\n    function addAttributes() {\n      if (scope.options.elementAttributes) {\n        el.attr(scope.options.elementAttributes);\n      }\n    }\n\n    function addClasses() {\n      if (scope.options.className) {\n        el.addClass(scope.options.className);\n      }\n      if (scope.options.type) {\n        el.addClass(`formly-field-${scope.options.type}`);\n      }\n    }\n\n    function setElementTemplate(templateString) {\n      el.html(asHtml(templateString));\n      $compile(el.contents())(scope);\n      return templateString;\n    }\n\n    function watchFormControl(templateString) {\n      let stopWatchingShowError = angular.noop;\n      if (scope.options.noFormControl) {\n        return;\n      }\n      const templateEl = angular.element(`<div>${templateString}</div>`);\n      const ngModelNodes = templateEl[0].querySelectorAll('[ng-model],[data-ng-model]');\n\n\n      if (ngModelNodes) {\n        angular.forEach(ngModelNodes, function(ngModelNode) {\n          fieldCount++;\n          watchFieldNameOrExistence(ngModelNode.getAttribute('name'));\n        });\n      }\n\n      function watchFieldNameOrExistence(name) {\n        const nameExpressionRegex = /\\{\\{(.*?)}}/;\n        const nameExpression = nameExpressionRegex.exec(name);\n        if (nameExpression) {\n          name = $interpolate(name)(scope);\n        }\n        watchFieldExistence(name);\n      }\n\n      function watchFieldExistence(name) {\n        scope.$watch(`form[\"${name}\"]`, function formControlChange(formControl) {\n          if (formControl) {\n            if(fieldCount > 1){\n              if(!scope.options.formControl){\n                scope.options.formControl = [];\n              }\n              scope.options.formControl.push(formControl);\n            } else {\n              scope.options.formControl = formControl;\n            }\n            scope.fc = scope.options.formControl; // shortcut for template authors\n            stopWatchingShowError();\n            addShowMessagesWatcher();\n          }\n        });\n      }\n\n      function addShowMessagesWatcher() {\n        stopWatchingShowError = scope.$watch(function watchShowValidationChange() {\n          const customExpression = formlyConfig.extras.errorExistsAndShouldBeVisibleExpression;\n          const {options, fc} = scope;\n          if (!fc.$invalid) {\n            return false;\n          } else if (typeof options.validation.show === 'boolean') {\n            return options.validation.show;\n          } else if (customExpression) {\n            return formlyUtil.formlyEval(scope, customExpression, fc.$modelValue, fc.$viewValue);\n          } else {\n            let noTouchedButDirty = (angular.isUndefined(fc.$touched) && fc.$dirty);\n            return (scope.fc.$touched || noTouchedButDirty);\n          }\n        }, function onShowValidationChange(show) {\n          scope.options.validation.errorExistsAndShouldBeVisible = show;\n          scope.showError = show; // shortcut for template authors\n        });\n      }\n    }\n\n    function callLinkFunctions() {\n      if (type && type.link) {\n        type.link.apply(thusly, args);\n      }\n      if (scope.options.link) {\n        scope.options.link.apply(thusly, args);\n      }\n    }\n\n\n    function runManipulators(manipulators) {\n      return function runManipulatorsOnTemplate(templateToManipulate) {\n        var chain = $q.when(templateToManipulate);\n        angular.forEach(manipulators, manipulator => {\n          chain = chain.then(template => {\n            return $q.when(manipulator(template, scope.options, scope)).then(newTemplate => {\n              return angular.isString(newTemplate) ? newTemplate : asHtml(newTemplate);\n            });\n          });\n        });\n        return chain;\n      };\n    }\n  }\n\n  // sort-of stateless util functions\n  function asHtml(el) {\n    var wrapper = angular.element('<a></a>');\n    return wrapper.append(el).html();\n  }\n\n  function getFieldType(options) {\n    return options.type && formlyConfig.getType(options.type);\n  }\n\n  function getManipulators(options, formOptions) {\n    let preWrapper = [];\n    let postWrapper = [];\n    addManipulators(options.templateManipulators);\n    addManipulators(formOptions.templateManipulators);\n    addManipulators(formlyConfig.templateManipulators);\n    return {preWrapper, postWrapper};\n\n    function addManipulators(manipulators) {\n      /* eslint-disable */ // it doesn't understand this :-(\n      const {preWrapper:pre = [], postWrapper:post = []} = (manipulators || {});\n      preWrapper = preWrapper.concat(pre);\n      postWrapper = postWrapper.concat(post);\n      /* eslint-enable */\n    }\n  }\n\n  function getFieldTemplate(options) {\n    function fromOptionsOrType(key, fieldType){\n      if(angular.isDefined(options[key])){\n        return options[key];\n      } else if(fieldType && angular.isDefined(fieldType[key])){\n        return fieldType[key];\n      }\n    }\n\n    let type = formlyConfig.getType(options.type, true, options);\n    let template = fromOptionsOrType('template', type);\n    let templateUrl = fromOptionsOrType('templateUrl', type);\n    if (angular.isUndefined(template) && !templateUrl) {\n      throw formlyUsability.getFieldError(\n        'type-type-has-no-template',\n        `Type '${options.type}' has not template. On element:`, options\n      );\n    }\n\n    return getTemplate(templateUrl || template, angular.isUndefined(template), options);\n  }\n\n\n  function getTemplate(template, isUrl, options) {\n    let templatePromise;\n    if (angular.isFunction(template)) {\n      templatePromise = $q.when(template(options));\n    } else {\n      templatePromise = $q.when(template);\n    }\n\n    if (!isUrl) {\n      return templatePromise;\n    } else {\n      let httpOptions = {cache: $templateCache};\n      return templatePromise\n        .then((url) => $http.get(url, httpOptions))\n        .then((response) => response.data)\n        .catch(function handleErrorGettingATemplate(error) {\n          formlyWarn(\n            'problem-loading-template-for-templateurl',\n            'Problem loading template for ' + template,\n            error\n          );\n        });\n    }\n  }\n\n  function transcludeInWrappers(options, formOptions) {\n    let wrapper = getWrapperOption(options, formOptions);\n\n    return function transcludeTemplate(template) {\n      if (!wrapper.length) {\n        return $q.when(template);\n      }\n\n      wrapper.forEach((aWrapper) => {\n        formlyUsability.checkWrapper(aWrapper, options);\n        aWrapper.validateOptions && aWrapper.validateOptions(options);\n        runApiCheck(aWrapper, options);\n      });\n      let promises = wrapper.map(w => getTemplate(w.template || w.templateUrl, !w.template));\n      return $q.all(promises).then(wrappersTemplates => {\n        wrappersTemplates.forEach((wrapperTemplate, index) => {\n          formlyUsability.checkWrapperTemplate(wrapperTemplate, wrapper[index]);\n        });\n        wrappersTemplates.reverse(); // wrapper 0 is wrapped in wrapper 1 and so on...\n        let totalWrapper = wrappersTemplates.shift();\n        wrappersTemplates.forEach(wrapperTemplate => {\n          totalWrapper = doTransclusion(totalWrapper, wrapperTemplate);\n        });\n        return doTransclusion(totalWrapper, template);\n      });\n    };\n  }\n\n  function doTransclusion(wrapper, template) {\n    let superWrapper = angular.element('<a></a>'); // this allows people not have to have a single root in wrappers\n    superWrapper.append(wrapper);\n    let transcludeEl = superWrapper.find('formly-transclude');\n    if (!transcludeEl.length) {\n      // try it using our custom find function\n      transcludeEl = formlyUtil.findByNodeName(superWrapper, 'formly-transclude');\n    }\n    transcludeEl.replaceWith(template);\n    return superWrapper.html();\n  }\n\n  function getWrapperOption(options, formOptions) {\n    /* eslint complexity:[6, 2] */\n    let wrapper = options.wrapper;\n    // explicit null means no wrapper\n    if (wrapper === null) {\n      return [];\n    }\n\n    // nothing specified means use the default wrapper for the type\n    if (!wrapper) {\n      // get all wrappers that specify they apply to this type\n      wrapper = arrayify(formlyConfig.getWrapperByType(options.type));\n    } else {\n      wrapper = arrayify(wrapper).map(formlyConfig.getWrapper);\n    }\n\n    // get all wrappers for that the type specified that it uses.\n    var type = formlyConfig.getType(options.type, true, options);\n    if (type && type.wrapper) {\n      let typeWrappers = arrayify(type.wrapper).map(formlyConfig.getWrapper);\n      wrapper = wrapper.concat(typeWrappers);\n    }\n\n    // add form wrappers\n    if (formOptions.wrapper) {\n      let formWrappers = arrayify(formOptions.wrapper).map(formlyConfig.getWrapper);\n      wrapper = wrapper.concat(formWrappers);\n    }\n\n    // add the default wrapper last\n    var defaultWrapper = formlyConfig.getWrapper();\n    if (defaultWrapper) {\n      wrapper.push(defaultWrapper);\n    }\n    return wrapper;\n  }\n\n  function checkApi(options) {\n    formlyApiCheck.throw(formlyApiCheck.formlyFieldOptions, options, {\n      prefix: 'formly-field directive',\n      url: 'formly-field-directive-validation-failed'\n    });\n    // validate with the type\n    const type = options.type && formlyConfig.getType(options.type);\n    if (type) {\n      if (type.validateOptions) {\n        type.validateOptions(options);\n      }\n      runApiCheck(type, options);\n    }\n  }\n\n  function checkFieldGroupApi(options) {\n    formlyApiCheck.throw(formlyApiCheck.fieldGroup, options, {\n      prefix: 'formly-field directive',\n      url: 'formly-field-directive-validation-failed'\n    });\n  }\n\n  function runApiCheck({apiCheck, apiCheckInstance, apiCheckFunction, apiCheckOptions}, options) {\n    if (!apiCheck) {\n      return;\n    }\n    const instance = apiCheckInstance || formlyApiCheck;\n    const fn = apiCheckFunction || 'warn';\n    const shape = instance.shape(apiCheck);\n    instance[fn](shape, options, apiCheckOptions || {\n        prefix: `formly-field ${name}`,\n        url: formlyApiCheck.config.output.docsBaseUrl + 'formly-field-type-apicheck-failed'\n      });\n  }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./directives/formly-field.js\n **/","export default formlyFocus;\n\n// @ngInject\nfunction formlyFocus($timeout, $document) {\n  return {\n    restrict: 'A',\n    link: function formlyFocusLink(scope, element, attrs) {\n      var previousEl = null;\n      var el = element[0];\n      var doc = $document[0];\n      attrs.$observe('formlyFocus', function respondToFocusExpressionChange(value) {\n        if (value === 'true') {\n          $timeout(function setElementFocus() {\n            previousEl = doc.activeElement;\n            el.focus();\n          }, ~~attrs.focusWait);\n        } else if (value === 'false') {\n          if (doc.activeElement === el) {\n            el.blur();\n            if (attrs.hasOwnProperty('refocus') && previousEl) {\n              previousEl.focus();\n            }\n          }\n        }\n      });\n    }\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./directives/formly-focus.js\n **/","import angular from 'angular-fix';\n\nexport default formlyForm;\n\n/**\n * @ngdoc directive\n * @name formlyForm\n * @restrict E\n */\n// @ngInject\nfunction formlyForm(formlyUsability, $parse, formlyConfig, $interpolate) {\n  var currentFormId = 1;\n  return {\n    restrict: 'E',\n    template: formlyFormGetTemplate,\n    replace: true,\n    transclude: true,\n    scope: {\n      fields: '=',\n      model: '=',\n      form: '=?',\n      options: '=?'\n    },\n    controller: FormlyFormController,\n    link: formlyFormLink\n  };\n\n  function formlyFormGetTemplate(el, attrs) {\n    const rootEl = getRootEl();\n    const fieldRootEl = getFieldRootEl();\n    const formId = `formly_${currentFormId++}`;\n    let parentFormAttributes = '';\n    if (attrs.hasOwnProperty('isFieldGroup') && el.parent().parent().hasClass('formly')) {\n      parentFormAttributes = copyAttributes(el.parent().parent()[0].attributes);\n    }\n    return `\n        <${rootEl} class=\"formly\"\n                 name=\"${getFormName()}\"\n                 role=\"form\" ${parentFormAttributes}>\n          <${fieldRootEl} formly-field\n               ng-repeat=\"field in fields ${getTrackBy()}\"\n               ${getHideDirective()}=\"!field.hide\"\n               class=\"formly-field\"\n               options=\"field\"\n               model=\"field.model || model\"\n               fields=\"fields\"\n               form=\"theFormlyForm\"\n               form-id=\"${getFormName()}\"\n               form-state=\"options.formState\"\n               form-options=\"options\"\n               index=\"$index\">\n          </${fieldRootEl}>\n          <div ng-transclude></div>\n        </${rootEl}>\n      `;\n\n    function getRootEl() {\n      return attrs.rootEl || 'ng-form';\n    }\n\n    function getFieldRootEl() {\n      return attrs.fieldRootEl || 'div';\n    }\n\n    function getHideDirective() {\n      return attrs.hideDirective || formlyConfig.extras.defaultHideDirective || 'ng-if';\n    }\n\n    function getTrackBy() {\n      if (!attrs.trackBy) {\n        return '';\n      } else {\n        return `track by ${attrs.trackBy}`;\n      }\n    }\n\n    function getFormName() {\n      let formName = formId;\n      const bindName = attrs.bindName;\n      if (bindName) {\n        if (angular.version.minor < 3) {\n          throw formlyUsability.getFormlyError('bind-name attribute on formly-form not allowed in < angular 1.3');\n        }\n        // we can do a one-time binding here because we know we're in 1.3.x territory\n        formName = `${$interpolate.startSymbol()}::'formly_' + ${bindName}${$interpolate.endSymbol()}`;\n      }\n      return formName;\n    }\n\n    function copyAttributes(attributes) {\n      const excluded = ['model', 'form', 'fields', 'options', 'name', 'role', 'class'];\n      const arrayAttrs = [];\n      angular.forEach(attributes, ({nodeName, nodeValue}) => {\n        if (nodeName !== 'undefined' && excluded.indexOf(nodeName) === -1) {\n          arrayAttrs.push(`${toKebabCase(nodeName)}=\"${nodeValue}\"`);\n        }\n      });\n      return arrayAttrs.join(' ');\n    }\n  }\n\n  // @ngInject\n  function FormlyFormController($scope, formlyApiCheck, formlyUtil) {\n    setupOptions();\n    $scope.model = $scope.model || {};\n    $scope.fields = $scope.fields || [];\n\n    angular.forEach($scope.fields, initModel); // initializes the model property if set to 'formState'\n    angular.forEach($scope.fields, attachKey); // attaches a key based on the index if a key isn't specified\n    angular.forEach($scope.fields, setupWatchers); // setup watchers for all fields\n\n    // watch the model and evaluate watch expressions that depend on it.\n    $scope.$watch('model', onModelOrFormStateChange, true);\n    if ($scope.options.formState) {\n      $scope.$watch('options.formState', onModelOrFormStateChange, true);\n    }\n\n    function onModelOrFormStateChange() {\n      angular.forEach($scope.fields, function runFieldExpressionProperties(field, index) {\n        /*jshint -W030 */\n        const model = field.model || $scope.model;\n        field.runExpressions && field.runExpressions(model);\n        if (field.hideExpression) { // can't use hide with expressionProperties reliably\n          const val = model[field.key];\n          field.hide = evalCloseToFormlyExpression(field.hideExpression, val, field, index);\n        }\n      });\n    }\n\n    function setupOptions() {\n      formlyApiCheck.throw(\n        [formlyApiCheck.formOptionsApi.optional], [$scope.options], {prefix: 'formly-form options check'}\n      );\n      $scope.options = $scope.options || {};\n      $scope.options.formState = $scope.options.formState || {};\n\n      angular.extend($scope.options, {\n        updateInitialValue,\n        resetModel\n      });\n\n    }\n\n    function updateInitialValue() {\n      angular.forEach($scope.fields, field => {\n        if (isFieldGroup(field)) {\n          field.options.updateInitialValue();\n        } else {\n          field.updateInitialValue();\n        }\n      });\n    }\n\n    function resetModel() {\n      angular.forEach($scope.fields, field => {\n        if (isFieldGroup(field)) {\n          field.options.resetModel();\n        } else {\n          field.resetModel();\n        }\n      });\n    }\n\n    function initModel(field) {\n      if (angular.isString(field.model)) {\n        const expression = field.model;\n        const index = $scope.fields.indexOf(field);\n        field.model = evalCloseToFormlyExpression(expression, undefined, field, index);\n        if (!field.model) {\n          throw formlyUsability.getFieldError(\n            'field-model-must-be-initialized',\n            'Field model must be initialized. When specifying a model as a string for a field, the result of the' +\n            ' expression must have been initialized ahead of time.',\n            field);\n        }\n      }\n    }\n\n    function attachKey(field, index) {\n      if (!isFieldGroup(field)) {\n        field.key = field.key || index || 0;\n      }\n    }\n\n    function setupWatchers(field, index) {\n      if (isFieldGroup(field) || !angular.isDefined(field.watcher)) {\n        return;\n      }\n      var watchers = field.watcher;\n      if (!angular.isArray(watchers)) {\n        watchers = [watchers];\n      }\n      angular.forEach(watchers, function setupWatcher(watcher) {\n        if (!angular.isDefined(watcher.listener)) {\n          throw formlyUsability.getFieldError(\n            'all-field-watchers-must-have-a-listener',\n            'All field watchers must have a listener', field\n          );\n        }\n        var watchExpression = getWatchExpression(watcher, field, index);\n        var watchListener = getWatchListener(watcher, field, index);\n\n        var type = watcher.type || '$watch';\n        watcher.stopWatching = $scope[type](watchExpression, watchListener, watcher.watchDeep);\n      });\n    }\n\n    function getWatchExpression(watcher, field, index) {\n      var watchExpression = watcher.expression || `model['${field.key}']`;\n      if (angular.isFunction(watchExpression)) {\n        // wrap the field's watch expression so we can call it with the field as the first arg\n        // and the stop function as the last arg as a helper\n        var originalExpression = watchExpression;\n        watchExpression = function formlyWatchExpression() {\n          var args = modifyArgs(watcher, index, ...arguments);\n          return originalExpression(...args);\n        };\n        watchExpression.displayName = `Formly Watch Expression for field for ${field.key}`;\n      }\n      return watchExpression;\n    }\n\n    function getWatchListener(watcher, field, index) {\n      var watchListener = watcher.listener;\n      if (angular.isFunction(watchListener)) {\n        // wrap the field's watch listener so we can call it with the field as the first arg\n        // and the stop function as the last arg as a helper\n        var originalListener = watchListener;\n        watchListener = function formlyWatchListener() {\n          var args = modifyArgs(watcher, index, ...arguments);\n          return originalListener(...args);\n        };\n        watchListener.displayName = `Formly Watch Listener for field for ${field.key}`;\n      }\n      return watchListener;\n    }\n\n    function modifyArgs(watcher, index, ...originalArgs) {\n      return [$scope.fields[index], ...originalArgs, watcher.stopWatching];\n    }\n\n    function evalCloseToFormlyExpression(expression, val, field, index) {\n      const extraLocals = getFormlyFieldLikeLocals(field, index);\n      return formlyUtil.formlyEval($scope, expression, val, val, extraLocals);\n    }\n\n    function getFormlyFieldLikeLocals(field, index) {\n      // this makes it closer to what a regular formlyExpression would be\n      return {\n        options: field,\n        index: index,\n        formState: $scope.options.formState,\n        formId: $scope.formId\n      };\n    }\n  }\n\n  function formlyFormLink(scope, el, attrs) {\n    setFormController();\n    fixChromeAutocomplete();\n\n    function setFormController() {\n      const formId = attrs.name;\n      scope.formId = formId;\n      scope.theFormlyForm = scope[formId];\n      if (attrs.form) {\n        const getter = $parse(attrs.form);\n        const setter = getter.assign;\n        const parentForm = getter(scope.$parent);\n        if (parentForm) {\n          scope.theFormlyForm = parentForm;\n          if (scope[formId]) {\n            scope.theFormlyForm.$removeControl(scope[formId]);\n          }\n\n          // this next line is probably one of the more dangerous things that angular-formly does to improve the\n          // API for angular-formly forms. It ensures that the NgModelControllers inside of formly-form will be\n          // attached to the form that is passed to formly-form rather than the one that formly-form creates\n          // this is necessary because it's confusing to have a step between the form you pass in\n          // and the fields in that form. It also is because angular doesn't propagate properties like $submitted down\n          // to children forms :-( This line was added to solve this issue:\n          // https://github.com/formly-js/angular-formly/issues/287\n          // luckily, this is how the formController has been accessed by the NgModelController since angular 1.0.0\n          // so I expect it will remain this way for the life of angular 1.x\n          el.removeData('$formController');\n        } else {\n          setter(scope.$parent, scope[formId]);\n        }\n      }\n      if (!scope.theFormlyForm && !formlyConfig.disableWarnings) {\n        /* eslint no-console:0 */\n        console.warn(formlyUsability.getErrorMessage(\n          'formly-form-has-no-formcontroller',\n          'A formly-form does not have a `form` property. Many functions of the form (like validation) may not work'\n        ));\n      }\n    }\n\n    /**\n     * chrome autocomplete lameness\n     * see https://code.google.com/p/chromium/issues/detail?id=468153#c14\n     * ლ(ಠ益ಠლ)   (╯°□°)╯︵ ┻━┻    (◞‸◟；)\n     */\n    function fixChromeAutocomplete() {\n      const global = formlyConfig.extras.removeChromeAutoComplete === true;\n      const offInstance = scope.options && scope.options.removeChromeAutoComplete === false;\n      const onInstance = scope.options && scope.options.removeChromeAutoComplete === true;\n      if ((global && !offInstance) || onInstance) {\n        const input = document.createElement('input');\n        input.setAttribute('autocomplete', 'address-level4');\n        input.setAttribute('hidden', 'true');\n        el[0].appendChild(input);\n      }\n\n    }\n  }\n\n\n  // stateless util functions\n  function toKebabCase(string) {\n    if (string) {\n      return string.replace(/([A-Z])/g, $1 => '-' + $1.toLowerCase());\n    } else {\n      return '';\n    }\n  }\n\n  function isFieldGroup(field) {\n    return field && !!field.fieldGroup;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./directives/formly-form.js\n **/","import angular from 'angular-fix';\n\nimport formlyApiCheck from './providers/formlyApiCheck';\nimport formlyErrorAndWarningsUrlPrefix from './other/docsBaseUrl';\nimport formlyUsability from './providers/formlyUsability';\nimport formlyConfig from './providers/formlyConfig';\nimport formlyValidationMessages from './providers/formlyValidationMessages';\nimport formlyUtil from './services/formlyUtil';\nimport formlyWarn from './services/formlyWarn';\n\nimport formlyCustomValidation from './directives/formly-custom-validation';\nimport formlyField from './directives/formly-field';\nimport formlyFocus from './directives/formly-focus';\nimport formlyForm from './directives/formly-form';\n\nimport formlyNgModelAttrsManipulator from './run/formlyNgModelAttrsManipulator';\nimport formlyCustomTags from './run/formlyCustomTags';\n\nconst ngModuleName = 'formly';\n\nexport default ngModuleName;\n\nconst ngModule = angular.module(ngModuleName, []);\n\nngModule.constant('formlyApiCheck', formlyApiCheck);\nngModule.constant('formlyErrorAndWarningsUrlPrefix', formlyErrorAndWarningsUrlPrefix);\nngModule.constant('formlyVersion', VERSION); // <-- webpack variable\n\nngModule.provider('formlyUsability', formlyUsability);\nngModule.provider('formlyConfig', formlyConfig);\n\nngModule.factory('formlyValidationMessages', formlyValidationMessages);\nngModule.factory('formlyUtil', formlyUtil);\nngModule.factory('formlyWarn', formlyWarn);\n\nngModule.directive('formlyCustomValidation', formlyCustomValidation);\nngModule.directive('formlyField', formlyField);\nngModule.directive('formlyFocus', formlyFocus);\nngModule.directive('formlyForm', formlyForm);\n\nngModule.run(formlyNgModelAttrsManipulator);\nngModule.run(formlyCustomTags);\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./index.common.js\n **/","import angular from 'angular-fix';\nimport apiCheckFactory from 'api-check';\n\nlet apiCheck = apiCheckFactory({\n  output: {\n    prefix: 'angular-formly:',\n    docsBaseUrl: require('../other/docsBaseUrl')\n  }\n});\n\nfunction shapeRequiredIfNot(otherProps, propChecker) {\n  if (!angular.isArray(otherProps)) {\n    otherProps = [otherProps];\n  }\n  const type = `specified if these are not specified: \\`${otherProps.join(', ')}\\` (otherwise it's optional)`;\n  function shapeRequiredIfNotDefinition(prop, propName, location, obj) {\n    var propExists = obj && obj.hasOwnProperty(propName);\n    var otherPropsExist = otherProps.some(function (otherProp) {\n      return obj && obj.hasOwnProperty(otherProp);\n    });\n    if (!otherPropsExist && !propExists) {\n      return apiCheck.utils.getError(propName, location, type);\n    } else if (propExists) {\n      return propChecker(prop, propName, location, obj);\n    }\n  }\n  shapeRequiredIfNotDefinition.type = type;\n  return apiCheck.utils.checkerHelpers.setupChecker(shapeRequiredIfNotDefinition);\n}\n\nfunction nullable(checker) {\n  return apiCheck.oneOfType([\n    apiCheck.oneOf([null]), checker\n  ]);\n}\n\nlet formlyExpression = apiCheck.oneOfType([apiCheck.string, apiCheck.func]);\nlet specifyWrapperType = nullable(apiCheck.typeOrArrayOf(apiCheck.string));\n\nconst apiCheckProperty = apiCheck.objectOf(apiCheck.func);\n\nconst apiCheckInstanceProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.func.withProperties({\n  warn: apiCheck.func,\n  throw: apiCheck.func,\n  shape: apiCheck.func\n}));\n\nconst apiCheckFunctionProperty = apiCheck.shape.onlyIf('apiCheck', apiCheck.oneOf(['throw', 'warn']));\n\nconst formlyWrapperType = apiCheck.shape({\n  name: shapeRequiredIfNot('types', apiCheck.string).optional,\n  template: apiCheck.shape.ifNot('templateUrl', apiCheck.string).optional,\n  templateUrl: apiCheck.shape.ifNot('template', apiCheck.string).optional,\n  types: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n  overwriteOk: apiCheck.bool.optional,\n  validateOptions: apiCheck.func.optional,\n  apiCheck: apiCheckProperty.optional,\n  apiCheckInstance: apiCheckInstanceProperty.optional,\n  apiCheckFunction: apiCheckFunctionProperty.optional,\n  apiCheckOptions: apiCheck.object.optional\n}).strict;\n\nconst expressionProperties = apiCheck.objectOf(apiCheck.oneOfType([\n  formlyExpression,\n  apiCheck.shape({\n    expression: formlyExpression,\n    message: formlyExpression.optional\n  }).strict\n]));\n\nconst modelChecker = apiCheck.oneOfType([apiCheck.string, apiCheck.object]);\n\nconst templateManipulators = nullable(apiCheck.shape({\n  preWrapper: nullable(apiCheck.arrayOf(apiCheck.func)).optional,\n  postWrapper: nullable(apiCheck.arrayOf(apiCheck.func)).optional\n}).strict);\n\nlet fieldOptionsApiShape = {\n  $$hashKey: apiCheck.any.optional,\n  type: apiCheck.shape.ifNot(['template', 'templateUrl'], apiCheck.string).optional,\n  template: apiCheck.shape.ifNot(\n    ['type', 'templateUrl'],\n    apiCheck.oneOfType([apiCheck.string, apiCheck.func])\n  ).optional,\n  templateUrl: apiCheck.shape.ifNot(\n    ['type', 'template'],\n    apiCheck.oneOfType([apiCheck.string, apiCheck.func])\n  ).optional,\n  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n  model: modelChecker.optional,\n  className: apiCheck.string.optional,\n  id: apiCheck.string.optional,\n  expressionProperties: expressionProperties.optional,\n  data: apiCheck.object.optional,\n  templateOptions: apiCheck.object.optional,\n  wrapper: specifyWrapperType.optional,\n  modelOptions: apiCheck.shape({\n    updateOn: apiCheck.string.optional,\n    debounce: apiCheck.oneOfType([\n      apiCheck.objectOf(apiCheck.number), apiCheck.number\n    ]).optional,\n    allowInvalid: apiCheck.bool.optional,\n    getterSetter: apiCheck.bool.optional,\n    timezone: apiCheck.string.optional\n  }).optional,\n  watcher: apiCheck.typeOrArrayOf(\n    apiCheck.shape({\n      expression: formlyExpression.optional,\n      listener: formlyExpression\n    })\n  ).optional,\n  validators: apiCheck.objectOf(apiCheck.oneOfType([\n    formlyExpression, apiCheck.shape({\n      expression: formlyExpression,\n      message: formlyExpression.optional\n    }).strict\n  ])).optional,\n  noFormControl: apiCheck.bool.optional,\n  hide: apiCheck.bool.optional,\n  hideExpression: formlyExpression.optional,\n  ngModelAttrs: apiCheck.objectOf(apiCheck.shape({\n    expression: apiCheck.shape.ifNot(['value', 'attribute', 'bound'], apiCheck.any).optional,\n    value: apiCheck.shape.ifNot('expression', apiCheck.any).optional,\n    attribute: apiCheck.shape.ifNot('expression', apiCheck.any).optional,\n    bound: apiCheck.shape.ifNot('expression', apiCheck.any).optional\n  }).strict).optional,\n  elementAttributes: apiCheck.objectOf(apiCheck.string).optional,\n  optionsTypes: apiCheck.typeOrArrayOf(apiCheck.string).optional,\n  link: apiCheck.func.optional,\n  controller: apiCheck.oneOfType([\n    apiCheck.string, apiCheck.func, apiCheck.array\n  ]).optional,\n  validation: apiCheck.shape({\n    show: nullable(apiCheck.bool).optional,\n    messages: apiCheck.objectOf(formlyExpression).optional,\n    errorExistsAndShouldBeVisible: apiCheck.bool.optional\n  }).optional,\n  formControl: apiCheck.object.optional,\n  value: apiCheck.func.optional,\n  runExpressions: apiCheck.func.optional,\n  templateManipulators: templateManipulators.optional,\n  resetModel: apiCheck.func.optional,\n  updateInitialValue: apiCheck.func.optional,\n  initialValue: apiCheck.any.optional,\n  defaultValue: apiCheck.any.optional\n};\n\n\nlet formlyFieldOptions = apiCheck.shape(fieldOptionsApiShape).strict;\n\n\nconst formOptionsApi = apiCheck.shape({\n  formState: apiCheck.object.optional,\n  resetModel: apiCheck.func.optional,\n  updateInitialValue: apiCheck.func.optional,\n  removeChromeAutoComplete: apiCheck.bool.optional,\n  templateManipulators: templateManipulators.optional,\n  wrapper: specifyWrapperType.optional\n}).strict;\n\n\nconst fieldGroup = apiCheck.shape({\n  $$hashKey: apiCheck.any.optional,\n  key: apiCheck.oneOfType([apiCheck.string, apiCheck.number]).optional,\n  // danger. Nested field groups wont get api-checked...\n  fieldGroup: apiCheck.arrayOf(apiCheck.oneOfType([formlyFieldOptions, apiCheck.object])),\n  className: apiCheck.string.optional,\n  options: formOptionsApi.optional,\n  hide: apiCheck.bool.optional,\n  hideExpression: formlyExpression.optional,\n  model: modelChecker.optional,\n  form: apiCheck.object.optional,\n  elementAttributes: apiCheck.objectOf(apiCheck.string).optional\n}).strict;\n\nlet typeOptionsDefaultOptions = angular.copy(fieldOptionsApiShape);\ntypeOptionsDefaultOptions.key = apiCheck.string.optional;\n\nlet formlyTypeOptions = apiCheck.shape({\n  name: apiCheck.string,\n  template: apiCheck.shape.ifNot('templateUrl', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n  templateUrl: apiCheck.shape.ifNot('template', apiCheck.oneOfType([apiCheck.string, apiCheck.func])).optional,\n  controller: apiCheck.oneOfType([\n    apiCheck.func, apiCheck.string, apiCheck.array\n  ]).optional,\n  link: apiCheck.func.optional,\n  defaultOptions: apiCheck.oneOfType([\n    apiCheck.func, apiCheck.shape(typeOptionsDefaultOptions)\n  ]).optional,\n  extends: apiCheck.string.optional,\n  wrapper: specifyWrapperType.optional,\n  data: apiCheck.object.optional,\n  validateOptions: apiCheck.func.optional,\n  apiCheck: apiCheckProperty.optional,\n  apiCheckInstance: apiCheckInstanceProperty.optional,\n  apiCheckFunction: apiCheckFunctionProperty.optional,\n  apiCheckOptions: apiCheck.object.optional,\n  overwriteOk: apiCheck.bool.optional\n}).strict;\n\nangular.extend(apiCheck, {\n  formlyTypeOptions, formlyFieldOptions, formlyExpression, formlyWrapperType, fieldGroup, formOptionsApi\n});\n\nexport default apiCheck;\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./providers/formlyApiCheck.js\n **/","import angular from 'angular-fix';\nimport utils from '../other/utils';\n\nexport default formlyConfig;\n\n// @ngInject\nfunction formlyConfig(formlyUsabilityProvider, formlyApiCheck) {\n\n  var typeMap = {};\n  var templateWrappersMap = {};\n  var defaultWrapperName = 'default';\n  var _this = this;\n  var getError = formlyUsabilityProvider.getFormlyError;\n\n  angular.extend(this, {\n    setType,\n    getType,\n    setWrapper,\n    getWrapper,\n    getWrapperByType,\n    removeWrapperByName,\n    removeWrappersForType,\n    disableWarnings: false,\n    extras: {\n      disableNgModelAttrsManipulator: false,\n      ngModelAttrsManipulatorPreferUnbound: false,\n      removeChromeAutoComplete: false,\n      defaultHideDirective: 'ng-if',\n      getFieldId: null\n    },\n    templateManipulators: {\n      preWrapper: [],\n      postWrapper: []\n    },\n    $get: () => this\n  });\n\n  function setType(options) {\n    if (angular.isArray(options)) {\n      angular.forEach(options, setType);\n    } else if (angular.isObject(options)) {\n      checkType(options);\n      if (options.extends) {\n        extendTypeOptions(options);\n      }\n      typeMap[options.name] = options;\n    } else {\n      throw getError(`You must provide an object or array for setType. You provided: ${JSON.stringify(arguments)}`);\n    }\n  }\n\n  function checkType(options) {\n    formlyApiCheck.throw(formlyApiCheck.formlyTypeOptions, options, {\n      prefix: 'formlyConfig.setType',\n      url: 'settype-validation-failed'\n    });\n    if (!options.overwriteOk) {\n      checkOverwrite(options.name, typeMap, options, 'types');\n    } else {\n      options.overwriteOk = undefined;\n    }\n  }\n\n  function extendTypeOptions(options) {\n    const extendsType = getType(options.extends, true, options);\n    extendTypeControllerFunction(options, extendsType);\n    extendTypeLinkFunction(options, extendsType);\n    extendTypeValidateOptionsFunction(options, extendsType);\n    extendTypeDefaultOptions(options, extendsType);\n    utils.reverseDeepMerge(options, extendsType);\n    extendTemplate(options, extendsType);\n  }\n\n  function extendTemplate(options, extendsType){\n    if(options.template && extendsType.templateUrl){\n      delete options.templateUrl;\n    } else if(options.templateUrl && extendsType.template){\n      delete options.template;\n    }\n  }\n\n  function extendTypeControllerFunction(options, extendsType) {\n    const extendsCtrl = extendsType.controller;\n    if (!angular.isDefined(extendsCtrl)) {\n      return;\n    }\n    const optionsCtrl = options.controller;\n    if (angular.isDefined(optionsCtrl)) {\n      options.controller = function ($scope, $controller) {\n        $controller(extendsCtrl, {$scope});\n        $controller(optionsCtrl, {$scope});\n      };\n      options.controller.$inject = ['$scope', '$controller'];\n    } else {\n      options.controller = extendsCtrl;\n    }\n  }\n\n  function extendTypeLinkFunction(options, extendsType) {\n    const extendsFn = extendsType.link;\n    if (!angular.isDefined(extendsFn)) {\n      return;\n    }\n    const optionsFn = options.link;\n    if (angular.isDefined(optionsFn)) {\n      options.link = function () {\n        extendsFn(...arguments);\n        optionsFn(...arguments);\n      };\n    } else {\n      options.link = extendsFn;\n    }\n  }\n\n  function extendTypeValidateOptionsFunction(options, extendsType) {\n    const extendsFn = extendsType.validateOptions;\n    if (!angular.isDefined(extendsFn)) {\n      return;\n    }\n    const optionsFn = options.validateOptions;\n    const originalDefaultOptions = options.defaultOptions;\n    if (angular.isDefined(optionsFn)) {\n      options.validateOptions = function (opts) {\n        optionsFn(opts);\n        let mergedOptions = angular.copy(opts);\n        let defaultOptions = originalDefaultOptions;\n        if (defaultOptions) {\n          if (angular.isFunction(defaultOptions)) {\n            defaultOptions = defaultOptions(mergedOptions);\n          }\n          utils.reverseDeepMerge(mergedOptions, defaultOptions);\n        }\n        extendsFn(mergedOptions);\n      };\n    } else {\n      options.validateOptions = extendsFn;\n    }\n  }\n\n  function extendTypeDefaultOptions(options, extendsType) {\n    const extendsDO = extendsType.defaultOptions;\n    if (!angular.isDefined(extendsDO)) {\n      return;\n    }\n    const optionsDO = options.defaultOptions;\n    const optionsDOIsFn = angular.isFunction(optionsDO);\n    const extendsDOIsFn = angular.isFunction(extendsDO);\n    if (extendsDOIsFn) {\n      options.defaultOptions = function defaultOptions(opts) {\n        const extendsDefaultOptions = extendsDO(opts);\n        const mergedDefaultOptions = {};\n        utils.reverseDeepMerge(mergedDefaultOptions, opts, extendsDefaultOptions);\n        let extenderOptionsDefaultOptions = optionsDO;\n        if (optionsDOIsFn) {\n          extenderOptionsDefaultOptions = extenderOptionsDefaultOptions(mergedDefaultOptions);\n        }\n        utils.reverseDeepMerge(extendsDefaultOptions, extenderOptionsDefaultOptions);\n        return extendsDefaultOptions;\n      };\n    } else if (optionsDOIsFn) {\n      options.defaultOptions = function defaultOptions(opts) {\n        let newDefaultOptions = {};\n        utils.reverseDeepMerge(newDefaultOptions, opts, extendsDO);\n        return optionsDO(newDefaultOptions);\n      };\n    }\n  }\n\n  function getType(name, throwError, errorContext) {\n    if (!name) {\n      return undefined;\n    }\n    var type = typeMap[name];\n    if (!type && throwError === true) {\n      throw getError(\n        `There is no type by the name of \"${name}\": ${JSON.stringify(errorContext)}`\n      );\n    } else {\n      return type;\n    }\n  }\n\n  function setWrapper(options, name) {\n    if (angular.isArray(options)) {\n      return options.map(wrapperOptions => setWrapper(wrapperOptions));\n    } else if (angular.isObject(options)) {\n      options.types = getOptionsTypes(options);\n      options.name = getOptionsName(options, name);\n      checkWrapperAPI(options);\n      templateWrappersMap[options.name] = options;\n      return options;\n    } else if (angular.isString(options)) {\n      return setWrapper({\n        template: options,\n        name\n      });\n    }\n  }\n\n  function getOptionsTypes(options) {\n    if (angular.isString(options.types)) {\n      return [options.types];\n    }\n    if (!angular.isDefined(options.types)) {\n      return [];\n    } else {\n      return options.types;\n    }\n  }\n\n  function getOptionsName(options, name) {\n    return options.name || name || options.types.join(' ') || defaultWrapperName;\n  }\n\n  function checkWrapperAPI(options) {\n    formlyUsabilityProvider.checkWrapper(options);\n    if (options.template) {\n      formlyUsabilityProvider.checkWrapperTemplate(options.template, options);\n    }\n    if (!options.overwriteOk) {\n      checkOverwrite(options.name, templateWrappersMap, options, 'templateWrappers');\n    } else {\n      delete options.overwriteOk;\n    }\n    checkWrapperTypes(options);\n  }\n\n  function checkWrapperTypes(options) {\n    let shouldThrow = !angular.isArray(options.types) || !options.types.every(angular.isString);\n    if (shouldThrow) {\n      throw getError(`Attempted to create a template wrapper with types that is not a string or an array of strings`);\n    }\n  }\n\n  function checkOverwrite(property, object, newValue, objectName) {\n    if (object.hasOwnProperty(property)) {\n      warn([\n        `Attempting to overwrite ${property} on ${objectName} which is currently`,\n        `${JSON.stringify(object[property])} with ${JSON.stringify(newValue)}`,\n        `To supress this warning, specify the property \"overwriteOk: true\"`\n      ].join(' '));\n    }\n  }\n\n  function getWrapper(name) {\n    return templateWrappersMap[name || defaultWrapperName];\n  }\n\n  function getWrapperByType(type) {\n    /* jshint maxcomplexity:6 */\n    var wrappers = [];\n    for (var name in templateWrappersMap) {\n      if (templateWrappersMap.hasOwnProperty(name)) {\n        if (templateWrappersMap[name].types && templateWrappersMap[name].types.indexOf(type) !== -1) {\n          wrappers.push(templateWrappersMap[name]);\n        }\n      }\n    }\n    return wrappers;\n  }\n\n  function removeWrapperByName(name) {\n    var wrapper = templateWrappersMap[name];\n    delete templateWrappersMap[name];\n    return wrapper;\n  }\n\n  function removeWrappersForType(type) {\n    var wrappers = getWrapperByType(type);\n    if (!wrappers) {\n      return undefined;\n    }\n    if (!angular.isArray(wrappers)) {\n      return removeWrapperByName(wrappers.name);\n    } else {\n      wrappers.forEach((wrapper) => removeWrapperByName(wrapper.name));\n      return wrappers;\n    }\n  }\n\n\n  function warn() {\n    if (!_this.disableWarnings) {\n      /* eslint no-console:0 */\n      console.warn(...arguments);\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./providers/formlyConfig.js\n **/","import angular from 'angular-fix';\n\nexport default formlyUsability;\n\n// @ngInject\nfunction formlyUsability(formlyApiCheck, formlyErrorAndWarningsUrlPrefix) {\n  angular.extend(this, {\n    getFormlyError,\n    getFieldError,\n    checkWrapper,\n    checkWrapperTemplate,\n    getErrorMessage,\n    $get: () => this\n  });\n\n  function getFieldError(errorInfoSlug, message, field) {\n    if (arguments.length < 3) {\n      field = message;\n      message = errorInfoSlug;\n      errorInfoSlug = null;\n    }\n    return new Error(getErrorMessage(errorInfoSlug, message) + ` Field definition: ${angular.toJson(field)}`);\n  }\n\n  function getFormlyError(errorInfoSlug, message) {\n    if (!message) {\n      message = errorInfoSlug;\n      errorInfoSlug = null;\n    }\n    return new Error(getErrorMessage(errorInfoSlug, message));\n  }\n\n  function getErrorMessage(errorInfoSlug, message) {\n    let url = '';\n    if (errorInfoSlug !== null) {\n      url = `${formlyErrorAndWarningsUrlPrefix}${errorInfoSlug}`;\n    }\n    return `Formly Error: ${message}. ${url}`;\n  }\n\n  function checkWrapper(wrapper) {\n    formlyApiCheck.throw(formlyApiCheck.formlyWrapperType, wrapper, {\n      prefix: 'formlyConfig.setWrapper',\n      urlSuffix: 'setwrapper-validation-failed'\n    });\n  }\n\n  function checkWrapperTemplate(template, additionalInfo) {\n    var formlyTransclude = '<formly-transclude></formly-transclude>';\n    if (template.indexOf(formlyTransclude) === -1) {\n      throw getFormlyError(\n        `Template wrapper templates must use \"${formlyTransclude}\" somewhere in them. ` +\n        `This one does not have \"<formly-transclude></formly-transclude>\" in it: ${template}` + '\\n' +\n        `Additional information: ${JSON.stringify(additionalInfo)}`\n      );\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./providers/formlyUsability.js\n **/","export default formlyValidationMessages;\n\n\n// @ngInject\nfunction formlyValidationMessages() {\n\n  var validationMessages = {\n    addTemplateOptionValueMessage,\n    addStringMessage,\n    messages: {}\n  };\n\n  return validationMessages;\n\n  function addTemplateOptionValueMessage(name, prop, prefix, suffix, alternate) {\n    validationMessages.messages[name] = templateOptionValue(prop, prefix, suffix, alternate);\n  }\n\n  function addStringMessage(name, string) {\n    validationMessages.messages[name] = () => string;\n  }\n\n\n  function templateOptionValue(prop, prefix, suffix, alternate) {\n    return function getValidationMessage(viewValue, modelValue, scope) {\n      if (scope.options.templateOptions[prop]) {\n        return `${prefix} ${scope.options.templateOptions[prop]} ${suffix}`;\n      } else {\n        return alternate;\n      }\n    };\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./providers/formlyValidationMessages.js\n **/","import angular from 'angular-fix';\nexport default addCustomTags;\n\n// @ngInject\nfunction addCustomTags($document) {\n  if ($document && $document.get) {\n    // IE8 check ->\n    // http://stackoverflow.com/questions/10964966/detect-ie-version-prior-to-v9-in-javascript/10965203#10965203\n    const document = $document.get(0);\n    const div = document.createElement('div');\n    div.innerHTML = '<!--[if lt IE 9]><i></i><![endif]-->';\n    const isIeLessThan9 = (div.getElementsByTagName('i').length === 1);\n\n    if (isIeLessThan9) {\n      // add the custom elements that we need for formly\n      const customElements = [\n        'formly-field', 'formly-form', 'formly-custom-validation', 'formly-focus', 'formly-transpose'\n      ];\n      angular.forEach(customElements, el => {\n        document.createElement(el);\n      });\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./run/formlyCustomTags.js\n **/","import angular from 'angular-fix';\n\nexport default addFormlyNgModelAttrsManipulator;\n\n// @ngInject\nfunction addFormlyNgModelAttrsManipulator(formlyConfig, $interpolate) {\n  if (formlyConfig.extras.disableNgModelAttrsManipulator) {\n    return;\n  }\n  formlyConfig.templateManipulators.preWrapper.push(ngModelAttrsManipulator);\n\n\n  function ngModelAttrsManipulator(template, options, scope) {\n    /* jshint maxcomplexity:6 */\n    var el = document.createElement('div');\n    var data = options.data;\n    if (data.skipNgModelAttrsManipulator === true) {\n      return template;\n    }\n    el.innerHTML = template;\n    var modelNodes = el.querySelectorAll('[ng-model], [data-ng-model]');\n    if (!modelNodes || !modelNodes.length) {\n      return template;\n    }\n\n    addIfNotPresent(modelNodes, 'id', scope.id);\n    addIfNotPresent(modelNodes, 'name', scope.id);\n\n    addValidation();\n    addModelOptions();\n    addTemplateOptionsAttrs();\n\n\n    return el.innerHTML;\n\n\n    function addValidation() {\n      if (angular.isDefined(options.validators) || angular.isDefined(options.validation.messages)) {\n        addIfNotPresent(modelNodes, 'formly-custom-validation', '');\n      }\n    }\n\n    function addModelOptions() {\n      if (angular.isDefined(options.modelOptions)) {\n        addIfNotPresent(modelNodes, 'ng-model-options', 'options.modelOptions');\n        if (options.modelOptions.getterSetter) {\n          angular.forEach(modelNodes, node => {\n            node.setAttribute('ng-model', 'options.value');\n          });\n        }\n      }\n    }\n\n    function addTemplateOptionsAttrs() {\n      if (!options.templateOptions && !options.expressionProperties) {\n        // no need to run these if there are no templateOptions or expressionProperties\n        return;\n      }\n      const to = options.templateOptions || {};\n      const ep = options.expressionProperties || {};\n\n      let ngModelAttributes = getBuiltInAttributes();\n\n      // extend with the user's specifications winning\n      angular.extend(ngModelAttributes, options.ngModelAttrs);\n\n      // Feel free to make this more simple :-)\n      angular.forEach(ngModelAttributes, (val, name) => {\n        /* eslint complexity:[2, 14] */\n        let attrVal;\n        let attrName;\n        const ref = `options.templateOptions['${name}']`;\n        const toVal = to[name];\n        const epVal = getEpValue(ep, name);\n\n        const inTo = angular.isDefined(toVal);\n        const inEp = angular.isDefined(epVal);\n        if (val.value) {\n          // I realize this looks backwards, but it's right, trust me...\n          attrName = val.value;\n          attrVal = name;\n        } else if (val.expression && inTo) {\n          attrName = val.expression;\n          if (angular.isString(to[name])) {\n            attrVal = `$eval(${ref})`;\n          } else if (angular.isFunction(to[name])) {\n            attrVal = `${ref}(model[options.key], options, this, $event)`;\n          } else {\n            throw new Error(\n              `options.templateOptions.${name} must be a string or function: ${JSON.stringify(options)}`\n            );\n          }\n        } else if (val.bound && inEp) {\n          attrName = val.bound;\n          attrVal = ref;\n        } else if ((val.attribute || val.boolean) && inEp) {\n          attrName = val.attribute || val.boolean;\n          attrVal = `${$interpolate.startSymbol()}${ref}${$interpolate.endSymbol()}`;\n        } else if (val.attribute && inTo) {\n          attrName = val.attribute;\n          attrVal = toVal;\n        } else if (val.boolean) {\n          if (inTo && !inEp && toVal) {\n            attrName = val.boolean;\n            attrVal = true;\n          } else {\n            /* eslint no-empty:0 */\n            // empty to illustrate that a boolean will not be added via val.bound\n            // if you want it added via val.bound, then put it in expressionProperties\n          }\n        } else if (val.bound && inTo) {\n          attrName = val.bound;\n          attrVal = ref;\n        }\n\n        if (angular.isDefined(attrName) && angular.isDefined(attrVal)) {\n          addIfNotPresent(modelNodes, attrName, attrVal);\n        }\n      });\n    }\n  }\n\n  // Utility functions\n  function getBuiltInAttributes() {\n    let ngModelAttributes = {\n      focus: {\n        attribute: 'formly-focus'\n      }\n    };\n    const boundOnly = [];\n    const bothBooleanAndBound = ['required', 'disabled'];\n    const bothAttributeAndBound = ['pattern', 'minlength'];\n    const expressionOnly = ['change', 'keydown', 'keyup', 'keypress', 'click', 'focus', 'blur'];\n    const attributeOnly = ['placeholder', 'min', 'max', 'tabindex', 'type'];\n    if (formlyConfig.extras.ngModelAttrsManipulatorPreferUnbound) {\n      bothAttributeAndBound.push('maxlength');\n    } else {\n      boundOnly.push('maxlength');\n    }\n\n    angular.forEach(boundOnly, item => {\n      ngModelAttributes[item] = {bound: 'ng-' + item};\n    });\n\n    angular.forEach(bothBooleanAndBound, item => {\n      ngModelAttributes[item] = {boolean: item, bound: 'ng-' + item};\n    });\n\n    angular.forEach(bothAttributeAndBound, item => {\n      ngModelAttributes[item] = {attribute: item, bound: 'ng-' + item};\n    });\n\n    angular.forEach(expressionOnly, item => {\n      var propName = 'on' + item.substr(0, 1).toUpperCase() + item.substr(1);\n      ngModelAttributes[propName] = {expression: 'ng-' + item};\n    });\n\n    angular.forEach(attributeOnly, item => {\n      ngModelAttributes[item] = {attribute: item};\n    });\n    return ngModelAttributes;\n  }\n\n  function getEpValue(ep, name) {\n    return ep['templateOptions.' + name] ||\n      ep[`templateOptions['${name}']`] ||\n      ep[`templateOptions[\"${name}\"]`];\n  }\n\n  function addIfNotPresent(nodes, attr, val) {\n    angular.forEach(nodes, node => {\n      if (!node.getAttribute(attr)) {\n        node.setAttribute(attr, val);\n      }\n    });\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./run/formlyNgModelAttrsManipulator.js\n **/","import utils from '../other/utils';\n\nexport default formlyUtil;\n\n// @ngInject\nfunction formlyUtil() {\n  return utils;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./services/formlyUtil.js\n **/","export default formlyWarn;\n\n// @ngInject\nfunction formlyWarn(formlyConfig, formlyErrorAndWarningsUrlPrefix, $log) {\n  return function warn() {\n    if (!formlyConfig.disableWarnings) {\n      var args = Array.prototype.slice.call(arguments);\n      var warnInfoSlug = args.shift();\n      args.unshift('Formly Warning:');\n      args.push(`${formlyErrorAndWarningsUrlPrefix}${warnInfoSlug}`);\n      $log.warn(...args);\n    }\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ../~/eslint-loader!./services/formlyWarn.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_17__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"angular\"\n ** module id = 17\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_18__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":\"apiCheck\",\"amd\":\"api-check\",\"commonjs2\":\"api-check\",\"commonjs\":\"api-check\"}\n ** module id = 18\n ** module chunks = 0\n **/"],"sourceRoot":""}